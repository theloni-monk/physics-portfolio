{"version":3,"sources":["resources/rand.jpg","simulation/BallSim.tsx","simulation/GenericSim.tsx","PreviewCard.tsx","Home.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","BallSim","props","title","draw","G","lineStyle","beginFill","drawCircle","endFill","update","setTimeout","handlePress","e","this","initPIXI","window","innerWidth","innerHeight","component","document","addEventListener","className","ref","thisDiv","renderTarget","onMouseMove","rest","app","fps","width","height","backgroundColor","PIXI","antialias","appendChild","view","start","stage","addChild","Component","PreviewCard","state","isClicked","isHovered","to","pathname","link","onClick","setState","description","testimg","require","Home","preview_img","App","useEffect","exact","path","SIMS","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4KAAAA,EAAOC,QAAU,IAA0B,kC,iICO9BC,EAAb,kDAEI,WAAYC,GAAc,IAAD,8BACrB,cAAMA,EAAMC,QAQhBC,KAAO,WAEH,EAAKC,EAAEC,UAAU,GACjB,EAAKD,EAAEE,UAAU,SAAU,GAC3B,EAAKF,EAAEG,WAAW,IAAK,IAAK,IAC5B,EAAKH,EAAEI,WAdc,EAiBzBC,OAAS,WACL,EAAKN,OACLO,WAAW,EAAKD,OAAQ,OAnBH,EAsBzBE,YAAc,SAACC,KAtBU,EAF7B,gEAMQC,KAAKC,SAASC,OAAOC,WAAYD,OAAOE,YAAa,GACrDJ,KAAKJ,WAPb,+BA4Bc,IAAD,OACDS,EAAYL,KAEtB,OADAM,SAASC,iBAAiB,SAAS,SAACR,GAAQ,EAAKD,YAAYC,MAE5D,yBAAKS,UAAU,oBACd,yBAAKC,IAAK,SAACC,GAA8BL,EAAUM,aAAeD,GACjEE,YAAa,SAACb,YAlCnB,G,kDCKI,WAAYV,GAA6B,IAAD,iDAAXwB,EAAW,iCAAXA,EAAW,yBACpC,cAAMA,IATAF,kBAQ8B,IAP9BpB,OAO8B,IAN9BuB,SAM8B,IAJ/BC,IAAa,GAIkB,EAF9B1B,WAE8B,IAMxCY,SAAW,SAACe,EAAcC,EAAeC,GACrC,EAAKJ,IAAM,IAAIK,IAAiB,CACrCH,MAAOA,EACPC,OAAQA,EACRC,gBAAiBA,EACjBE,WAAW,IAEZ,EAAKT,aAAaU,YAAY,EAAKP,IAAIQ,MACvC,EAAKR,IAAIS,QACT,EAAKT,IAAIU,MAAMC,SAAS,EAAKlC,IAbvB,EAAKF,MAAQA,EACb,EAAKE,EAAI,IAAI4B,IAHuB,E,UATKO,cCW5BC,G,wDACjB,WAAYvC,GAAc,IAAD,8BACrB,cAAMA,IACDwC,MAAQ,CAACC,WAAU,EAAOC,WAAU,GAFpB,E,qDAIf,IAAD,OAEL,OAAG9B,KAAK4B,MAAMC,UAAkB,kBAAC,IAAD,CAAUE,GAAM,CAACC,SAAUhC,KAAKZ,MAAM6C,QAElE,yBAAKzB,UAAU,iBAAiB0B,QAAS,SAACnC,GAAD,OAAO,EAAKoC,SAAS,CAACN,WAAU,MACrE,yBAAKrB,UAAY,cAAcR,KAAKZ,MAAMC,OAC1C,yBAAKmB,UAAW,mBAAmBR,KAAKZ,MAAMgD,kB,GAXrBV,cCXnCW,EAAUC,EAAQ,IACXC,EAAO,WAChB,OACI,yBAAK/B,UAAY,QACb,kBAAC,EAAD,CAAayB,KAAO,WAAWO,YAAeH,EAAShD,MAAQ,wBAAwB+C,YAAc,mCCApGK,EAAM,WAOjB,OALAC,qBAAU,cACR,IAKI,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAO,WAAWvC,UAAawC,IAC5C,kBAAC,IAAD,CAAOF,OAAK,EAACC,KAAO,IAAIvC,UAAakC,MCL3BO,QACW,cAA7B5C,OAAO6C,SAASC,UAEe,UAA7B9C,OAAO6C,SAASC,UAEhB9C,OAAO6C,SAASC,SAASC,MACvB,2D,YCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGJ9C,SAAS+C,eAAe,SD6HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0711b023.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/rand.7fb5be4a.jpg\";","import React, { Component } from 'react'\r\nimport * as PIXI from 'pixi.js'\r\nimport GenericSim from './GenericSim'\r\n\r\ninterface iprops{\r\n    title: string\r\n}\r\nexport class BallSim extends GenericSim{\r\n    //WRITME: basic ball collision sim\r\n    constructor(props:iprops){\r\n        super(props.title);\r\n    }\r\n    componentDidMount(){\r\n        this.initPIXI(window.innerWidth, window.innerHeight, 0);\r\n        this.update()\r\n    }\r\n\r\n\r\n    draw = () =>{\r\n        // Circle\r\n        this.G.lineStyle(0); // draw a circle, set the lineStyle to zero so the circle doesn't have an outline\r\n        this.G.beginFill(0xDE3249, 1);\r\n        this.G.drawCircle(100, 250, 50);\r\n        this.G.endFill();\r\n    }\r\n\r\n    update = () =>{\r\n        this.draw();\r\n        setTimeout(this.update, 16.7);\r\n    }\r\n\r\n    handlePress = (e:KeyboardEvent) => {\r\n\r\n    }\r\n\r\n    render() {\r\n        let component = this;\r\n\t\tdocument.addEventListener('keyup', (e) => { this.handlePress(e) });\r\n\t\treturn (\r\n\t\t\t<div className=\"GameFrameWrapper\">\r\n\t\t\t\t<div ref={(thisDiv: HTMLDivElement) => { component.renderTarget = thisDiv }}\r\n\t\t\t\t\tonMouseMove={(e) => {  }}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t); //\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport * as PIXI from 'pixi.js'\r\n\r\nexport default abstract class GenericSim extends Component {\r\n    protected renderTarget: HTMLDivElement\r\n    protected G: PIXI.Graphics\r\n    protected app: PIXI.Application\r\n\r\n    readonly fps:number = 60;\r\n    \r\n    protected title: string\r\n\r\n    constructor(title:string, ...rest:any[]){\r\n        super(rest);\r\n        this.title = title\r\n        this.G = new PIXI.Graphics();\r\n    }\r\n\r\n    initPIXI = (width:number, height:number, backgroundColor:number | 0x000000) =>{\r\n        this.app = new PIXI.Application({\r\n\t\t\twidth: width,\r\n\t\t\theight: height,\r\n\t\t\tbackgroundColor: backgroundColor,\r\n\t\t\tantialias: true\r\n\t\t});\r\n\t\tthis.renderTarget.appendChild(this.app.view);\r\n\t\tthis.app.start(); //start renderer;\r\n\t\tthis.app.stage.addChild(this.G);\r\n    }\r\n\r\n    abstract handlePress(e:KeyboardEvent):void\r\n\r\n    abstract componentDidMount():void //must call initPIXI\r\n\r\n    abstract draw():void\r\n\r\n    abstract update(delta:number):void\r\n    abstract render():JSX.Element\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Route, Redirect } from \"react-router-dom\";\r\n\r\ninterface iprops{\r\n    link: string,\r\n    preview_img: any,\r\n    title: string,\r\n    description: string\r\n}\r\ninterface istate{\r\n    isClicked:boolean,\r\n    isHovered:boolean\r\n}\r\n\r\nexport default class PreviewCard extends Component<iprops,istate> {\r\n    constructor(props:iprops){\r\n        super(props);\r\n        this.state = {isClicked:false, isHovered:false};\r\n    }\r\n    render() {\r\n        //fuxk it write the hover css later stop being a dumbass\r\n        if(this.state.isClicked) return <Redirect to = {{pathname: this.props.link}} />\r\n        return (\r\n            <div className='card-container' onClick={(e) => this.setState({isClicked:true})}>\r\n                <div className = 'card title'>{this.props.title}</div>\r\n                <div className= 'card-descriptor'>{this.props.description}</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, {useState, useEffect} from 'react'\r\nimport PreviewCard from './PreviewCard' \r\n\r\nconst testimg = require('./resources/rand.jpg');\r\nexport const Home = () => {\r\n    return (\r\n        <div className = 'home'>\r\n            <PreviewCard link = '/ballsim' preview_img = {testimg} title = 'Basic Ball Simulation' description = 'Purely for testing purposes.'/>\r\n        </div>\r\n    );\r\n}\r\n","import React,{useState, useEffect} from 'react';\nimport {Switch, Route} from 'react-router-dom';\nimport * as SIMS from './simulation'\nimport './css/App.css'\n\nimport {Home} from './Home';\n\nexport const App = () => { //Functional Component\n\n  useEffect(()=>{ // onmount\n  },[])\n\n\n  //TODO: deploy base mvp to github pages\n  return (\n        <Switch>\n          <Route exact path = '/ballsim' component = {SIMS.BallSim} />\n          <Route exact path = '/' component = {Home}/>\n        </Switch>\n  );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport {App} from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport {BrowserRouter} from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}