{"version":3,"sources":["resources/rand.jpg","simulation/BlankTestSim.tsx","simulation/GenericSim.tsx","simulation/utils/vect.ts","simulation/BasicParticleSim.tsx","simulation/OrbitSim.tsx","simulation/IDrawable.ts","simulation/pegboardSim/BallCollider.ts","simulation/pegboardSim/PegCollider.ts","simulation/pegboardSim/Pegboard.ts","simulation/pegboardSim/pegboardSim.tsx","PreviewCard.tsx","Home.tsx","App.tsx","serviceWorker.ts","index.js"],"names":["BlankTestSim","props","title","draw","G","lineStyle","beginFill","drawCircle","endFill","update","setTimeout","handlePress","e","this","screen","screenHeight","window","innerHeight","screenWidth","innerWidth","startX","endX","startY","endY","initPIXI","component","document","addEventListener","className","ref","thisDiv","renderTarget","onMouseMove","rest","app","prevUpdateTime","fps","backgroundColor","PIXI","width","height","antialias","appendChild","view","start","stage","addChild","Date","now","Component","Vector2","x","y","copy","toString","length","Math","sqrt","isZero","radians","atan2","congugate","norm","multScalar","inv","add","other","sub","s","dot","fromPolar","r","theta","cos","sin","Particle","p","v","a","pos","vel","acc","g","setPos","setVel","setAcc","t","sb","scaleh","scalew","px","py","clear","pxPos","posToPx","BasicParticleSim","timeoutPtr","ball","state","paused","deltaT","Number","dampingLevel","goBack","console","log","getBoundingClientRect","initSim","clearTimeout","to","pathname","onClick","setState","type","min","max","value","onChange","target","COORDSPACE","PLANET_RAD","BODY_RAD","GravBody","mass","drawEllipse","F","rVel","String","BallColliderObject","rad","radius","atRest","momentum","cofRestitution","PegColliderObject","isOverlapping","MIN_VEL","BALL_START_POS","PEG_LOCS","Pegboard","xrange","yrange","pegs","balls","allAtRest","forEach","peg","step","ballsAtRest","doBPCollision","checkEdge","spawnBall","push","xlen","abs","ylen","loc","distanceVect","distanceVectMag","minDistance","correctionVector","sine","cosine","bTemp","vTemp","vFinal","bFinal","velNoiseVect","random","b1","b2","updateTicker","pegboardSim","board","debounced","code","autoStart","sw","getElementById","clientWidth","sh","clientHeight","ratio","id","PreviewCard","isClicked","isHovered","link","description","testimg","require","Home","preview_img","App","useEffect","exact","path","SIMS","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9c7a14e3.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/rand.4c40f82d.jpg\";","import React from 'react'\r\nimport GenericSim from './GenericSim'\r\n\r\ninterface iprops{\r\n    title: string\r\n}\r\nexport class BlankTestSim extends GenericSim{\r\n    //WRITME: basic ball collision sim\r\n    constructor(props:iprops){\r\n        super(props.title);\r\n    }\r\n    componentDidMount(){\r\n        this.screen = {\r\n            screenHeight:window.innerHeight, \r\n            screenWidth:window.innerWidth,\r\n            startX: 0, endX: 15,\r\n            startY: 0, endY: 10\r\n        }\r\n        this.initPIXI(0);\r\n        this.update()\r\n    }\r\n\r\n\r\n    draw = () =>{\r\n        // Circle\r\n        this.G.lineStyle(0); // draw a circle, set the lineStyle to zero so the circle doesn't have an outline\r\n        this.G.beginFill(0xDE3249, 1);\r\n        this.G.drawCircle(100, 250, 50);\r\n        this.G.endFill();\r\n    }\r\n\r\n    update = () =>{\r\n        this.draw();\r\n\r\n        setTimeout(this.update, 16.7);\r\n    }\r\n\r\n    handlePress = (e:KeyboardEvent) => {\r\n\r\n    }\r\n\r\n    render() {\r\n        let component = this;\r\n\t\tdocument.addEventListener('keyup', (e) => { this.handlePress(e) });\r\n\t\treturn (\r\n\t\t\t<div className=\"GameFrameWrapper\">\r\n\t\t\t\t<div ref={(thisDiv: HTMLDivElement) => { component.renderTarget = thisDiv }}\r\n\t\t\t\t\tonMouseMove={(e) => {  }}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t); //\r\n    }\r\n}\r\n","import { Component } from 'react'\r\nimport * as PIXI from 'pixi.js'\r\nimport {screenBounds} from './IDrawable'\r\n\r\nexport default abstract class GenericSim extends Component {\r\n    protected renderTarget: HTMLDivElement\r\n    protected G: PIXI.Graphics\r\n    protected app: PIXI.Application\r\n    protected prevUpdateTime:number\r\n    protected screen:screenBounds \r\n\r\n    readonly fps:number = 60;\r\n    \r\n    protected title: string\r\n\r\n    constructor(title:string, ...rest:any[]){\r\n        super(rest);\r\n        this.title = title\r\n        this.G = new PIXI.Graphics();\r\n    }\r\n\r\n    initPIXI = (backgroundColor:number) =>{\r\n        //TODO: on resize reinit application and reassign this.G\r\n        this.app = new PIXI.Application({\r\n\t\t\twidth: this.screen.screenWidth,\r\n\t\t\theight: this.screen.screenHeight,\r\n\t\t\tbackgroundColor: backgroundColor,\r\n\t\t\tantialias: true\r\n\t\t});\r\n\t\tthis.renderTarget.appendChild(this.app.view);\r\n\t\tthis.app.start(); //start renderer internal update ticker;\r\n        this.app.stage.addChild(this.G);\r\n        this.prevUpdateTime = Date.now();\r\n    }\r\n\r\n    abstract handlePress(e:KeyboardEvent):void\r\n\r\n    /** @note must create a screenBounds object and call initPIXI */\r\n    abstract componentDidMount():void \r\n\r\n    abstract draw():void\r\n\r\n    abstract update():void\r\n    abstract render():JSX.Element\r\n}\r\n","/**@class Immutable Vector class, all methods return either properties or new vectors */\r\nexport default class Vector2 {\r\n    readonly x: number;\r\n    readonly y: number;\r\n\r\n    constructor(x: number, y: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    static fromPolar = (r: number, theta: number): Vector2 => new Vector2(r * Math.cos(theta), r * Math.sin(theta))\r\n\r\n    copy = ():Vector2 => new Vector2(this.x, this.y)\r\n\r\n    toString = ():string => '<x: ' + this.x.toString() + ', y: ' + this.y.toString()+'>'\r\n\r\n    length = (): number => Math.sqrt(this.x * this.x + (this.y * this.y))\r\n\r\n    isZero = (): boolean => this.length()<0.00001\r\n\r\n    radians = (): number => Math.atan2(this.y, this.x)\r\n\r\n    congugate = (): Vector2 => new Vector2(this.x, -this.y)\r\n\r\n    norm = (): Vector2 => this.multScalar(1/this.length())\r\n\r\n\r\n    inv = (): Vector2 => new Vector2(-this.x, -this.y)\r\n\r\n\r\n    add = (other: Vector2): Vector2 => new Vector2(this.x + other.x, this.y + other.y);\r\n\r\n\r\n    sub = (other: Vector2): Vector2 => new Vector2(this.x - other.x, this.y - other.y);\r\n\r\n\r\n    multScalar = (s: number): Vector2 => new Vector2(this.x * s, this.y * s)\r\n\r\n\r\n    dot = (other: Vector2): number => this.x * other.x + (this.y * other.y)\r\n\r\n}","import React,{Component} from 'react'\r\nimport * as PIXI from 'pixi.js'\r\nimport GenericSim from './GenericSim'\r\n\r\nimport Drawable, {screenBounds} from './IDrawable'\r\nimport DynamicBody from './IDynamicBody'\r\nimport Vector2 from './utils/vect'\r\n\r\nimport { Redirect } from 'react-router-dom'\r\ninterface iparticle extends DynamicBody,Drawable{};\r\n\r\nclass Particle implements iparticle{\r\n    pos:Vector2 \r\n    vel:Vector2 \r\n    acc:Vector2\r\n    g:PIXI.Graphics\r\n    constructor(p:Vector2,v:Vector2,a:Vector2){\r\n        this.pos = p;\r\n        this.vel = v;\r\n        this.acc = a;\r\n        this.g = new PIXI.Graphics();\r\n    }\r\n    setPos = (p:Vector2) => this.pos = p;\r\n    setVel = (v:Vector2) => this.vel = v;\r\n    setAcc = (a:Vector2) => this.acc = a;\r\n\r\n    /**@param t - time difference between update calls ; must be in seconds _not ms_ */\r\n    update(t:number){\r\n        this.pos = this.pos.add(this.vel.multScalar(t));\r\n        this.vel = this.vel.add(this.acc.multScalar(t));\r\n    }\r\n\r\n    posToPx(sb:screenBounds){\r\n        let scaleh = (sb.endY - sb.startY) / sb.screenHeight;\r\n        //what one px corresponds to\r\n        let scalew = (sb.endX - sb.startX) / sb.screenWidth;\r\n        \r\n        let px = ((this.pos.x - sb.startX) / scalew);\r\n        let py = ((-1 * (this.pos.y - sb.endY)) / scaleh);\r\n        return new Vector2(px,py);\r\n    }\r\n\r\n    draw(sb:screenBounds){\r\n        this.g.clear();\r\n        let pxPos:Vector2 = this.posToPx(sb);\r\n        // Circle\r\n        this.g.lineStyle(0); //lineStyle to zero so the circle doesn't have an outline\r\n        this.g.beginFill(0xDE3249, 1);\r\n        this.g.drawCircle(pxPos.x, pxPos.y, 20); //20px size is totally arbitrary but will be fine for now\r\n        this.g.endFill();\r\n    }\r\n    \r\n}\r\n\r\ninterface iprops{\r\n    title: string\r\n}\r\ninterface istate{\r\n    goBack:boolean,\r\n    paused:boolean,\r\n    dampingLevel: string\r\n}\r\nexport default class BasicParticleSim extends Component<iprops,istate> {\r\n    protected renderTarget: HTMLDivElement\r\n    protected G: PIXI.Graphics\r\n    protected app: PIXI.Application\r\n    protected prevUpdateTime:number\r\n    protected screen:screenBounds \r\n    protected timeoutPtr: any //weird js pointer type\r\n\r\n    readonly fps:number = 60;\r\n\r\n    protected title: string\r\n\r\n    /**UNIQUE SIM VARIABLES */\r\n    ball:Particle\r\n\r\n    constructor(props:iprops){\r\n        super(props);\r\n        this.state = {\r\n            goBack:false,\r\n            paused:false,\r\n            dampingLevel: '0.5'\r\n        }\r\n        //this.title = props.title\r\n        this.G = new PIXI.Graphics();\r\n    }\r\n\r\n    initPIXI = (backgroundColor:number) =>{\r\n        //TODO: on resize reinit application and reassign this.G\r\n        //FIXME: get accurate canvas size from dom\r\n        this.app = new PIXI.Application({\r\n\t\t\twidth: window.innerWidth ,//this.screen.screenWidth,\r\n\t\t\theight: window.innerHeight, // this.screen.screenHeight,\r\n\t\t\tbackgroundColor: backgroundColor,\r\n\t\t\tantialias: true\r\n\t\t});\r\n\t\tthis.renderTarget.appendChild(this.app.view);\r\n\t\tthis.app.start(); //start renderer internal update ticker;\r\n        this.app.stage.addChild(this.G);\r\n    }\r\n\r\n    componentDidMount(){\r\n        console.log(this.renderTarget.getBoundingClientRect())\r\n        this.screen = {\r\n            screenWidth: (window.innerWidth), //this.renderTarget.getBoundingClientRect().width,\r\n            screenHeight: window.innerHeight, //this.renderTarget.getBoundingClientRect().height, \r\n            startX: 0, endX: 15,\r\n            startY: 0, endY: 10\r\n        }\r\n        this.initPIXI(0); //black background\r\n        this.initSim()\r\n    }\r\n\r\n    initSim(){\r\n        if(this.timeoutPtr) clearTimeout(this.timeoutPtr);\r\n        if(this.ball) this.ball.g.clear();\r\n        this.ball = new Particle(\r\n            new Vector2(2,0), // pos (5,0)\r\n            new Vector2(3,7), // 3m/s horizontal 7m/s upward initial velocity\r\n            new Vector2(0,-10) // -10m/s/s downward acceleration due to gravity\r\n        );\r\n        this.app.stage.addChild(this.ball.g)\r\n        this.update();\r\n    }\r\n\r\n    draw = () =>{\r\n        this.ball.draw(this.screen)\r\n    }\r\n\r\n    update = () =>{\r\n        if(this.state.paused) {this.prevUpdateTime = Date.now(); return}\r\n        if(!this.prevUpdateTime) this.prevUpdateTime = Date.now();\r\n        let deltaT = (Date.now() - this.prevUpdateTime)/1000\r\n        /**UPDATE LOGIC */\r\n        this.ball.update(deltaT);\r\n        //constrain ball to window bounds in X\r\n        if(this.ball.pos.x<this.screen.startX || this.ball.pos.x > this.screen.endX){\r\n            this.ball.setAcc(new Vector2(0,0));\r\n            this.ball.setVel(new Vector2(0,0));\r\n        }\r\n        if(this.ball.pos.y<this.screen.startY){\r\n            this.ball.setPos(new Vector2(this.ball.pos.x, this.screen.startY)) // avoid double collision registration\r\n            this.ball.setVel(new Vector2(this.ball.vel.x,-this.ball.vel.y* (1 - Number(this.state.dampingLevel)/10))); // bounce off of floor\r\n        }\r\n\r\n        this.draw();\r\n        this.prevUpdateTime = Date.now();\r\n        this.timeoutPtr = setTimeout(this.update, 16.66); //~60fps\r\n    }\r\n\r\n    handlePress = (e:KeyboardEvent) => {\r\n\r\n    }\r\n\r\n    render() {\r\n        if(this.state.goBack) return <Redirect to = {{pathname:'/'}}/>\r\n        let component = this;\r\n\t\tdocument.addEventListener('keyup', (e) => { this.handlePress(e) });\r\n\t\treturn (\r\n            <div className =\"sim-wrapper\">\r\n                <div className = \"sim-header\">Basic Bouncing Ball</div>\r\n                <div className=\"sim-sidebar\" >\r\n                    <div className = \"back-butt\" onClick={(e)=>this.setState({goBack:true})}>back</div>\r\n                    <div className = \"pause-butt\" onClick = {(e)=>this.setState({paused:!this.state.paused})}>{!this.state.paused?'pause':'unpause'}</div>\r\n                    <div className = \"restart-butt\" onClick = {(e)=>this.initSim()}>restart</div>\r\n                    {/** this is where you place any misc inputs to your sim and bind them to state*/}\r\n                    <div className = \"num-input\">\r\n                        <em>damping level:</em>\r\n                        {/**TODO: make custom input component */}\r\n                        <input className = \"slider\" type=\"range\" min=\"0\" max=\"10\" value={this.state.dampingLevel} onChange={(v)=>this.setState({dampingLevel: v.target.value})}/>\r\n                    </div>\r\n                </div>\r\n                <div className = \"sim-content\" ref={(thisDiv: HTMLDivElement) => { component.renderTarget = thisDiv }}\r\n                        onMouseMove={(e) => {  }}\r\n                    />\r\n                <div className = \"sim-footer\">written by theo cooper</div>\r\n                \r\n            </div>\r\n\t\t);\r\n    }\r\n}\r\n","import React,{Component} from 'react'\r\nimport * as PIXI from 'pixi.js'\r\n//TODO organize all this code\r\nimport Drawable, {screenBounds} from './IDrawable'\r\nimport DynamicBody from './IDynamicBody'\r\nimport Vector2 from './utils/vect'\r\n\r\nimport { Redirect } from 'react-router-dom'\r\n/**SIM CONSTANTS */\r\nconst COORDSPACE = [-15, 15, -10, 10] // km\r\n//what one px corresponds to\r\nconst scalew = (width:number): number => (COORDSPACE[1] - COORDSPACE[0]) / width;\r\nconst scaleh = (height:number): number => (COORDSPACE[3] - COORDSPACE[2]) / height;\r\n\r\n\r\nconst PLANET_RAD = 3.1855 //km\r\nconst BODY_RAD = 0.5 //km(idk)\r\nconst PLANET_MASS = 6000000000000 //kg\r\nconst ESCAPE_VEL =  3.1 //km/s\r\nconst GRAV_CONST = 0.0000000000066 \r\n\r\n/**UNIQUE ACTOR */\r\ninterface igrav extends DynamicBody, Drawable{}\r\nclass GravBody implements igrav{\r\n    pos:Vector2 \r\n    vel:Vector2 \r\n    acc:Vector2\r\n\r\n    mass: number\r\n\r\n    g:PIXI.Graphics\r\n    constructor(p:Vector2,v:Vector2,a:Vector2, mass:number){\r\n        this.pos = p;\r\n        this.vel = v;\r\n        this.acc = a;\r\n\r\n        this.mass = mass;\r\n\r\n        this.g = new PIXI.Graphics();\r\n    }\r\n    setPos = (p:Vector2) => this.pos = p;\r\n    setVel = (v:Vector2) => this.vel = v;\r\n    setAcc = (a:Vector2) => this.acc = a;\r\n\r\n    /**@param t - time difference between update calls ; must be in seconds _not ms_ */\r\n    update(t:number){\r\n        this.pos = this.pos.add(this.vel.multScalar(t)); \r\n        this.vel = this.vel.add(this.acc.multScalar(t));\r\n    }\r\n\r\n    posToPx(sb:screenBounds){\r\n        let px = ((this.pos.x - sb.startX) / scalew(sb.screenWidth));\r\n        let py = ((-1 * (this.pos.y - sb.endY)) / scaleh(sb.screenHeight));\r\n        return new Vector2(px,py);\r\n    }\r\n\r\n    draw(sb:screenBounds){\r\n        this.g.clear();\r\n        let pxPos:Vector2 = this.posToPx(sb);\r\n        // Circle\r\n        this.g.lineStyle(0); //lineStyle to zero so the circle doesn't have an outline\r\n        this.g.beginFill(0x838B8B, 1);\r\n        this.g.drawEllipse(pxPos.x, pxPos.y, BODY_RAD / scalew(sb.screenWidth), BODY_RAD / scaleh(sb.screenHeight)); //20px size is totally arbitrary but will be fine for now\r\n        this.g.endFill();\r\n    }\r\n}\r\n\r\n/**LAYOUT */\r\ninterface iprops{\r\n    title: string\r\n}\r\ninterface istate{\r\n    goBack:boolean,\r\n    paused:boolean,\r\n    rVel: string\r\n}\r\nexport default class BasicParticleSim extends Component<iprops,istate> {\r\n    protected renderTarget: HTMLDivElement\r\n    protected G: PIXI.Graphics\r\n    protected app: PIXI.Application\r\n    protected prevUpdateTime:number\r\n    protected screen:screenBounds \r\n    protected timeoutPtr: any //weird js pointer type\r\n\r\n    readonly fps:number = 60;\r\n\r\n    protected title: string\r\n\r\n    /**UNIQUE SIM VARIABLES */\r\n    ball:GravBody\r\n\r\n    constructor(props:iprops){\r\n        super(props);\r\n        this.state = {\r\n            goBack:false,\r\n            paused:false,\r\n            rVel: String(ESCAPE_VEL)\r\n        }\r\n        //this.title = props.title\r\n        this.G = new PIXI.Graphics();\r\n    }\r\n\r\n    initPIXI = (backgroundColor:number) =>{\r\n        //TODO: on resize reinit application and reassign this.G\r\n        //FIXME: get accurate canvas size from dom\r\n        this.app = new PIXI.Application({\r\n\t\t\twidth: window.innerWidth ,//this.screen.screenWidth,\r\n\t\t\theight: window.innerHeight, // this.screen.screenHeight,\r\n\t\t\tbackgroundColor: backgroundColor,\r\n\t\t\tantialias: true\r\n\t\t});\r\n\t\tthis.renderTarget.appendChild(this.app.view);\r\n\t\tthis.app.start(); //start renderer internal update ticker;\r\n        this.app.stage.addChild(this.G);\r\n    }\r\n\r\n    componentDidMount(){\r\n        console.log(this.renderTarget.getBoundingClientRect())\r\n        this.screen = {\r\n            screenWidth: (window.innerWidth), //this.renderTarget.getBoundingClientRect().width,\r\n            screenHeight: window.innerHeight, //this.renderTarget.getBoundingClientRect().height, \r\n            startX: COORDSPACE[0], endX: COORDSPACE[1],\r\n            startY: COORDSPACE[2], endY: COORDSPACE[3]\r\n        }\r\n        console.log(scalew(this.screen.screenWidth), scaleh(this.screen.screenHeight))\r\n        this.initPIXI(0x0F0F0F); //white background\r\n        this.initSim()\r\n    }\r\n\r\n    initSim(){\r\n        console.log('initsim called')\r\n        if(this.timeoutPtr) clearTimeout(this.timeoutPtr);\r\n        if(this.ball) this.ball.g.clear();\r\n        this.ball = new GravBody(\r\n            new Vector2(0,PLANET_RAD+BODY_RAD), // pos (5,0)\r\n            new Vector2(Number(this.state.rVel), 0), // horizontal\r\n            new Vector2(0,0), // -10m/s/s downward acceleration due to gravity\r\n            5\r\n        );\r\n        this.app.stage.addChild(this.G);\r\n        this.app.stage.addChild(this.ball.g)\r\n        this.update();\r\n    }\r\n\r\n    draw = () =>{\r\n        //draw planet\r\n        this.G.clear();\r\n        this.G.lineStyle(0); //lineStyle to zero so the circle doesn't have an outline\r\n        this.G.beginFill(0x50A6C2, 1);\r\n        this.G.drawEllipse(this.screen.screenWidth/2, this.screen.screenHeight/2, PLANET_RAD / scalew(this.screen.screenWidth), PLANET_RAD / scaleh(this.screen.screenHeight));\r\n        this.G.endFill();\r\n        this.ball.draw(this.screen);\r\n    }\r\n\r\n    update = () =>{\r\n        if(this.state.paused) {\r\n            this.prevUpdateTime = Date.now(); \r\n            this.timeoutPtr = setTimeout(this.update, 16.66); //~60fps\r\n            return;\r\n        }\r\n        if(!this.prevUpdateTime) this.prevUpdateTime = Date.now();\r\n        let deltaT = (Date.now() - this.prevUpdateTime)/1000;\r\n        \r\n\r\n        /**UPDATE LOGIC */\r\n        let r:Vector2 = this.ball.pos; //displacement vector\r\n        // resultent force vector\r\n        let F:Vector2 = r.norm().multScalar( -GRAV_CONST * PLANET_MASS * this.ball.mass / (r.length() ** 2) ); \r\n        \r\n        //ACC from force vector\r\n        //console.log(`${A}`)\r\n        this.ball.setAcc(F.multScalar(1/this.ball.mass));\r\n       \r\n        \r\n        \r\n        //constrict ball to window\r\n        if(this.ball.pos.x<this.screen.startX || this.ball.pos.x > this.screen.endX || this.ball.pos.y<this.screen.startY|| this.ball.pos.y>this.screen.endY){\r\n            //console.log('ball constricted to window')\r\n            this.ball.setAcc(new Vector2(0,0));\r\n            this.ball.setVel(new Vector2(0,0));\r\n        }\r\n        //stop on coll with planet\r\n        if(r.length() < PLANET_RAD + BODY_RAD){\r\n            //console.log('ball stopped on collision with planet')\r\n            this.ball.setAcc(new Vector2(0,0));\r\n            this.ball.setVel(new Vector2(0,0));\r\n        }\r\n\r\n        //update vel, pos\r\n        this.ball.update(deltaT);\r\n        this.draw();\r\n        this.prevUpdateTime = Date.now();\r\n        this.timeoutPtr = setTimeout(this.update, 16.66); //~60fps\r\n        return;\r\n    }\r\n\r\n    handlePress = (e:KeyboardEvent) => {\r\n\r\n    }\r\n \r\n    render() {\r\n        if(this.state.goBack) return <Redirect to = {{pathname:'/'}}/>\r\n        let component = this;\r\n\t\tdocument.addEventListener('keyup', (e) => { this.handlePress(e) });\r\n\t\treturn (\r\n            <div className =\"sim-wrapper\">\r\n                <div className = \"sim-header\">Orbit Simulation</div>\r\n                <div className=\"sim-sidebar\" >\r\n                    <div className = \"back-butt\" onClick={(e)=>this.setState({goBack:true})}>back</div>\r\n                    <div className = \"pause-butt\" onClick = {(e)=>this.setState({paused:!this.state.paused})}>{!this.state.paused?'pause':'unpause'}</div>\r\n                    <div className = \"restart-butt\" onClick = {(e)=>this.initSim()}>restart</div>\r\n                     \r\n                    {/** this is where you place any misc inputs to your sim and bind them to state*/}\r\n                    \r\n                    <div className = \"num-input\">\r\n                        <em>Initial rightward velocity: (km/s)</em>\r\n                        {/**TODO: make custom input component */}\r\n                       1<input className = \"slider\" type=\"range\" min=\"1\" max=\"50\" value={String(Number(this.state.rVel)*10)} onChange={(v)=>this.setState({rVel: String(Number(v.target.value)/10)})}/>5\r\n                    </div>\r\n                    \r\n                </div>\r\n                <div className = \"sim-content\" ref={(thisDiv: HTMLDivElement) => { component.renderTarget = thisDiv }}\r\n                        onMouseMove={(e) => {  }}\r\n                    />\r\n                <div className = \"sim-footer\">Written by Theo Cooper</div>\r\n                \r\n            </div>\r\n\t\t);\r\n    }\r\n}\r\n","import * as PIXI from 'pixi.js';\r\nimport Vector2 from './utils/vect'\r\n\r\nexport const scalew = (width:number, sb:screenBounds): number => (sb.endX - sb.startX) / width;\r\nexport const scaleh = (height:number, sb:screenBounds): number => (sb.endY - sb.startY) / height;\r\n\r\nexport interface screenBounds{\r\n    screenWidth:number \r\n    screenHeight:number \r\n    startX:number \r\n    endX:number \r\n    startY:number \r\n    endY:number\r\n}\r\nexport default interface Drawable{\r\n    g:PIXI.Graphics\r\n\r\n    /**@param coordinates in real space, converted to pixel location based on internal scaling parameters \r\n     * @note all Drawables in a given application must be ensured to have the same space to pixel transforms\r\n    */\r\n    posToPx(sb:screenBounds):Vector2\r\n    \r\n    draw(sb:screenBounds):void\r\n}","import Vector2 from '../utils/vect'\r\nimport DynamicBody from '../IDynamicBody'\r\nimport CircleCollider from '../ICircleCollider'\r\nimport Drawable, { screenBounds, scaleh, scalew} from '../IDrawable'\r\nimport * as PIXI from 'pixi.js'\r\nconst COLOR = 0xFA0A0B\r\n\r\nexport default class BallColliderObject implements DynamicBody, CircleCollider, Drawable{\r\n    //NOTE: must add each g to app.stage\r\n    g: PIXI.Graphics\r\n\r\n    pos: Vector2\r\n    acc:Vector2\r\n    vel:Vector2\r\n    mass: number\r\n\r\n    radius: number\r\n\r\n    atRest:boolean\r\n\r\n    constructor(pos:Vector2, rad:number){\r\n        //somewhat hacked bc we know the system its used in\r\n        this.pos = pos;\r\n        this.vel = new Vector2(0,0);\r\n        this.acc = new Vector2(0, -9.8);\r\n        this.mass = 1;\r\n        this.radius = rad;\r\n        this.atRest = false;\r\n\r\n        this.g = new PIXI.Graphics();\r\n    }\r\n    \r\n    momentum = ():Vector2 => this.vel.multScalar(this.mass)\r\n\r\n    update(deltaT:number){\r\n        this.pos = this.pos.add(this.vel.multScalar(deltaT)); \r\n        this.vel = this.vel.add(this.acc.multScalar(deltaT));\r\n    }\r\n    setPos = (p:Vector2):void => {this.pos = p};\r\n    setVel = (v:Vector2):void => {this.vel = v}\r\n    setAcc = (a:Vector2):void => {this.acc = a}\r\n\r\n    isOverlapping(other:CircleCollider){\r\n        return this.pos.sub(other.pos).length() < this.radius + other.radius\r\n    }\r\n\r\n    collide(other:CircleCollider, cofRestitution:number | 1){\r\n        //WRITEME collision\r\n    }\r\n\r\n    posToPx(sb:screenBounds){\r\n        let px = ((this.pos.x - sb.startX) / scalew(sb.screenWidth, sb));\r\n        let py = ((-1 * (this.pos.y - sb.endY)) / scaleh(sb.screenHeight, sb));\r\n        return new Vector2(px,py);\r\n    }\r\n\r\n    draw(sb:screenBounds){\r\n        this.g.clear();\r\n        let pxPos:Vector2 = this.posToPx(sb);\r\n        // Circle\r\n        this.g.lineStyle(0); //lineStyle to zero so the circle doesn't have an outline\r\n        this.g.beginFill(COLOR, 1);\r\n        this.g.drawEllipse(pxPos.x, pxPos.y, this.radius / scalew(sb.screenWidth, sb), this.radius / scaleh(sb.screenHeight, sb)); //20px size is totally arbitrary but will be fine for now\r\n        this.g.endFill();\r\n    }\r\n}","import Vector2 from '../utils/vect'\r\nimport CircleCollider from '../ICircleCollider'\r\nimport Drawable,{screenBounds, scaleh, scalew} from '../IDrawable'\r\nimport * as PIXI from 'pixi.js'\r\nconst COLOR = 0xF8F8FF;\r\nexport default class PegColliderObject implements CircleCollider, Drawable{\r\n    pos: Vector2\r\n    vel: Vector2 = new Vector2(0,0)\r\n    acc: Vector2 = new Vector2(0,0)\r\n    mass: number\r\n    radius: number\r\n\r\n    atRest: boolean = true\r\n\r\n    g: PIXI.Graphics\r\n\r\n    constructor(p:Vector2, rad:number){\r\n        this.pos = p;\r\n        this.radius = rad;\r\n        this.mass = 1;\r\n\r\n        this.g = new PIXI.Graphics();\r\n    }\r\n\r\n\r\n    setPos = ():void => {};//cant alter pos\r\n    \r\n    momentum = ():Vector2 => new Vector2(0,0)\r\n\r\n    isOverlapping = (other:CircleCollider):boolean => this.pos.sub(other.pos).length() < this.radius + other.radius\r\n    \r\n    posToPx(sb:screenBounds){\r\n        let px = ((this.pos.x - sb.startX) / scalew(sb.screenWidth, sb));\r\n        let py = ((-1 * (this.pos.y - sb.endY)) / scaleh(sb.screenHeight, sb));\r\n        return new Vector2(px,py);\r\n    }\r\n\r\n    draw(sb:screenBounds){\r\n        this.g.clear();\r\n        let pxPos:Vector2 = this.posToPx(sb);\r\n        // Circle\r\n        this.g.lineStyle(0); //lineStyle to zero so the circle doesn't have an outline\r\n        this.g.beginFill(COLOR, 1);\r\n        this.g.drawEllipse(pxPos.x, pxPos.y, this.radius / scalew(sb.screenWidth, sb), this.radius / scaleh(sb.screenHeight, sb)); //20px size is totally arbitrary but will be fine for now\r\n        this.g.endFill();\r\n    }\r\n\r\n    collide(other:CircleCollider){}\r\n}","import CircleCollider from '../ICircleCollider';\r\nimport BallColliderObject from './BallCollider';\r\nimport PegColliderObject from './PegCollider';\r\nimport Vector2 from '../utils/vect';\r\nimport { screenBounds } from '../IDrawable';\r\nimport * as PIXI from 'pixi.js'\r\n\r\nconst MIN_VEL = 0.0001;\r\nconst VEL_NOISE_MAX = 0.01;\r\nconst PEG_RAD = 0.2;\r\nconst BALL_RAD = 0.2;\r\nconst BALL_START_POS = new Vector2(0, -BALL_RAD - 0.001);\r\nconst BB_RESTITUTION = 0.8; //what factor of kinetic energy is preserved in ball-ball collision, aka  how bouncy balls are with each other\r\nconst BP_RESTITUTION = 0.7; //what factor of kinetic energy is preserved in ball-peg collision, aka  how bouncy balls are with pegs\r\n\r\n\r\n//locations are percentages down the field in x and y\r\nconst PEG_LOCS: Vector2[] = [\r\n    new Vector2(-0.8, 0.2), new Vector2(-0.6, 0.2), new Vector2(-0.4, 0.2), new Vector2(-0.2, 0.2), new Vector2(0, 0.2),new Vector2(0.8, 0.2), new Vector2(0.6, 0.2), new Vector2(0.4, 0.2), new Vector2(0.2, 0.2),\r\n    new Vector2(-0.9, 0.3), new Vector2(-0.7, 0.3), new Vector2(-0.5, 0.3), new Vector2(-0.3, 0.3), new Vector2(-0.1, 0.3),new Vector2(0.7, 0.3), new Vector2(0.5, 0.3), new Vector2(0.3, 0.3), new Vector2(0.1, 0.3),\r\n    new Vector2(-0.8, 0.4), new Vector2(-0.6, 0.4), new Vector2(-0.4, 0.4), new Vector2(-0.2, 0.4), new Vector2(0, 0.4),new Vector2(0.8, 0.4), new Vector2(0.6, 0.4), new Vector2(0.4, 0.4), new Vector2(0.2, 0.4),\r\n    new Vector2(-0.9, 0.5), new Vector2(-0.7, 0.5), new Vector2(-0.5, 0.5), new Vector2(-0.3, 0.5), new Vector2(-0.1, 0.5),new Vector2(0.7, 0.5), new Vector2(0.5, 0.5), new Vector2(0.3, 0.5), new Vector2(0.1, 0.5)\r\n];\r\n\r\nexport default class Pegboard {\r\n    stage: PIXI.Container\r\n\r\n    pegs: PegColliderObject[]\r\n    balls: BallColliderObject[]\r\n    allAtRest: boolean\r\n\r\n    xrange: number[];\r\n    yrange: number[];\r\n\r\n    constructor(stage: PIXI.Container, xrange: number[], yrange: number[]) {\r\n        this.stage = stage;\r\n        this.pegs = [];\r\n        this.balls = [];\r\n\r\n        this.xrange = xrange;\r\n        this.yrange = yrange;\r\n        let xlen = Math.abs(xrange[0]) + Math.abs(xrange[1]);\r\n        let ylen = Math.abs(yrange[0]) + Math.abs(yrange[1]);\r\n\r\n        PEG_LOCS.forEach(loc =>\r\n            this.pegs.push(new PegColliderObject(new Vector2(loc.x * xlen / 2, -loc.y * ylen), PEG_RAD)))\r\n\r\n        this.pegs.forEach(peg => this.stage.addChild(peg.g))\r\n\r\n        this.allAtRest = false;\r\n    }\r\n\r\n    draw = (sb: screenBounds) => {\r\n        this.pegs.forEach(peg => peg.draw(sb));\r\n        this.balls.forEach(ball => ball.draw(sb));\r\n    }\r\n\r\n    step = (deltaT: number) => {\r\n        //console.log('deltat', deltaT);\r\n        if (this.balls.length === 0) { return;}\r\n        let ballsAtRest = 0;\r\n        let rindex = 0;//jank asf method of checking balls against each other by refrence without duplicates\r\n        this.balls.forEach(ball => {\r\n            if (!ball.atRest) {\r\n\r\n                ball.update(deltaT);\r\n\r\n                this.pegs.forEach(peg => {\r\n                    if (ball.isOverlapping(peg)) { \r\n                        this.doBPCollision(ball, peg) }\r\n                });\r\n                // this.balls.slice(rindex + 1).forEach(oball => {\r\n                //     if (!oball.atRest) {\r\n                //         if (ball.isOverlapping(oball)) this.doBBCollision(ball, oball)\r\n                //     }\r\n                // })\r\n                // rindex++;\r\n                this.checkEdge(ball);\r\n                // check to see if all balls are at rest\r\n                if (ball.atRest) ballsAtRest++;\r\n\r\n            }\r\n        });\r\n        if (ballsAtRest === this.balls.length)\r\n            this.allAtRest = true;\r\n    }\r\n\r\n    spawnBall = () => {\r\n        this.balls.push(new BallColliderObject(BALL_START_POS, BALL_RAD));\r\n        this.stage.addChild(this.balls[this.balls.length - 1].g);\r\n        console.log('ball spawned');\r\n    }\r\n\r\n    checkEdge(ball: BallColliderObject) {\r\n        // reverse ball x vel and push out of wall if bumps into side wall\r\n        if (ball.pos.x - ball.radius < this.xrange[0]) {\r\n            ball.setVel(new Vector2(-ball.vel.x, ball.vel.y));\r\n            ball.setPos(new Vector2(this.xrange[0] + ball.radius + 0.001, ball.pos.y));\r\n        }\r\n        if (ball.pos.x + ball.radius > this.xrange[1]) {\r\n            ball.setVel(new Vector2(-ball.vel.x, ball.vel.y));\r\n            ball.setPos(new Vector2(this.xrange[1] - ball.radius + 0.001, ball.pos.y))\r\n        }\r\n\r\n        //bounce off of ceiling\r\n        if (ball.pos.y + ball.radius > this.yrange[1]) {\r\n            ball.setVel(new Vector2(ball.vel.x, -ball.vel.y));\r\n            ball.setPos(new Vector2(ball.pos.x, this.yrange[1] - ball.radius + 0.001))\r\n        }\r\n\r\n        //stop when hitting the floor\r\n        if (ball.pos.y < this.yrange[0]) {\r\n            ball.setVel(new Vector2(0, 0));\r\n            ball.atRest = true;\r\n        }\r\n    }\r\n\r\n    doBPCollision(ball: BallColliderObject, peg: PegColliderObject) {\r\n        // Get distances between the balls components\r\n        let distanceVect: Vector2 = ball.pos.sub(peg.pos);\r\n\r\n        // Calculate magnitude of the vector separating the balls\r\n        let distanceVectMag = distanceVect.length();\r\n\r\n        // Minimum distance before they are touching\r\n        let minDistance = ball.radius + peg.radius;\r\n\r\n        if (distanceVectMag < minDistance) {\r\n            //let distanceCorrection = (minDistance - distanceVectMag) / 2.0;\r\n            let d = distanceVect.copy();\r\n            let correctionVector = d.norm().multScalar(minDistance + 0.01);\r\n            ball.pos = ball.pos.add(correctionVector);\r\n\r\n            // get angle of distanceVect\r\n            let theta = distanceVect.radians();\r\n            // precalculate trig values\r\n            let sine = Math.sin(theta);\r\n            let cosine = Math.cos(theta);\r\n\r\n            /*\r\n             * bTemp will hold rotated ball poss. You just need to worry about bTemp[1]\r\n             * pos\r\n             */\r\n            let bTemp: Vector2[] = [new Vector2(0, 0), new Vector2(0, 0)]\r\n\r\n\r\n            /*\r\n             * this ball's pos is relative to the b2 so you can use the vector\r\n             * between them (bVect) as the reference point in the rotation expressions.\r\n             * bTemp[0].pos.x and bTemp[0].pos.y will initialize automatically to\r\n             * 0.0, which is what you want since b[1] will rotate around b[0]\r\n             */\r\n            bTemp[1] = new Vector2(cosine * distanceVect.x + sine * distanceVect.y, cosine * distanceVect.y - sine * distanceVect.x)\r\n\r\n            // rotate Temporary velocities\r\n            let vTemp: Vector2[] = [new Vector2(cosine * ball.vel.x + sine * ball.vel.y, cosine * ball.vel.y - sine * ball.vel.x),\r\n            new Vector2(cosine * peg.vel.x + sine * peg.vel.y, cosine * peg.vel.y - sine * peg.vel.x)];\r\n\r\n            /*\r\n             * Now that velocities are rotated, you can use 1D conservation of momentum\r\n             * equations to calculate the final vel along the x-axis.\r\n             */\r\n            let vFinal: Vector2[] = [\r\n                // final rotated vel for b[0]\r\n                new Vector2(((ball.mass - peg.mass) * vTemp[0].x + 2 * peg.mass * vTemp[1].x) / (ball.mass + peg.mass), vTemp[0].y),\r\n                // final rotated vel for b[0]\r\n                new Vector2(((peg.mass - ball.mass) * vTemp[1].x + 2 * ball.mass * vTemp[0].x) / (ball.mass + peg.mass), vTemp[1].y)\r\n            ];\r\n            // hack to avoid clumping\r\n            bTemp[0].add(new Vector2(vFinal[0].x, 0));\r\n            bTemp[1].add(new Vector2(vFinal[1].x, 0));\r\n\r\n            /*\r\n             * Rotate ball poss and velocities back Reverse signs in trig expressions\r\n             * to rotate in the opposite direction\r\n             */\r\n            // rotate balls\r\n            let bFinal: Vector2[] = [new Vector2(cosine * bTemp[0].x - sine * bTemp[0].y, cosine * bTemp[0].y + sine * bTemp[0].x),\r\n            new Vector2(cosine * bTemp[1].x - sine * bTemp[1].y, cosine * bTemp[1].y + sine * bTemp[1].x)];\r\n\r\n            // update ball to screen pos\r\n            ball.setPos(ball.pos.add(bFinal[0]));\r\n\r\n            // update velocities\r\n            //ball.setVel(new Vector2(cosine * vFinal[0].x - sine * vFinal[0].y, cosine * vFinal[0].y + sine * vFinal[0].x));\r\n\r\n            // if peg doesn't move then for KE to be preserved output vel mag must be the same as input, just rotated\r\n            ball.setVel(Vector2.fromPolar(ball.vel.length(), theta));\r\n\r\n            // prevent head on collision from resulting in perfect up and down bouncing\r\n            let velNoiseVect: Vector2 = new Vector2((Math.random()-0.5) * VEL_NOISE_MAX, Math.abs(Math.random() * VEL_NOISE_MAX));\r\n            ball.setVel(ball.vel.add(velNoiseVect).multScalar(BP_RESTITUTION));\r\n\r\n            //check if velocities are low enough to set the ball to rest\r\n            if (ball.vel.length() < MIN_VEL) {\r\n                ball.setVel(new Vector2(0, 0));\r\n                ball.atRest = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    doBBCollision(b1: BallColliderObject, b2: BallColliderObject) {\r\n        // Get distances between the balls components\r\n        let distanceVect: Vector2 = b1.pos.sub(b2.pos);\r\n\r\n        // Calculate magnitude of the vector separating the balls\r\n        let distanceVectMag = distanceVect.length();\r\n\r\n        // Minimum distance before they are touching\r\n        let minDistance = b1.radius + b2.radius;\r\n\r\n        if (distanceVectMag > minDistance) return;\r\n\r\n\r\n        //let distanceCorrection = (minDistance - distanceVectMag) / 2.0;\r\n        let d = distanceVect.copy();\r\n        let correctionVector = d.norm().multScalar(minDistance + 0.01);\r\n        b1.pos = b1.pos.add(correctionVector);\r\n\r\n        // get angle of distanceVect\r\n        let theta = distanceVect.radians();\r\n        // precalculate trig values\r\n        let sine = Math.sin(theta);\r\n        let cosine = Math.cos(theta);\r\n\r\n        /*\r\n         * bTemp will hold rotated ball poss. You just need to worry about bTemp[1]\r\n         * pos\r\n         */\r\n        let bTemp: Vector2[] = [new Vector2(0, 0), new Vector2(0, 0)]\r\n\r\n\r\n        /*\r\n         * this ball's pos is relative to the b2 so you can use the vector\r\n         * between them (bVect) as the reference point in the rotation expressions.\r\n         * bTemp[0].pos.x and bTemp[0].pos.y will initialize automatically to\r\n         * 0.0, which is what you want since b[1] will rotate around b[0]\r\n         */\r\n        bTemp[1] = new Vector2(cosine * distanceVect.x + sine * distanceVect.y, cosine * distanceVect.y - sine * distanceVect.x)\r\n\r\n        // rotate Temporary velocities\r\n        let vTemp: Vector2[] = [new Vector2(cosine * b1.vel.x + sine * b1.vel.y, cosine * b1.vel.y - sine * b1.vel.x),\r\n        new Vector2(cosine * b2.vel.x + sine * b2.vel.y, cosine * b2.vel.y - sine * b2.vel.x)];\r\n\r\n        /*\r\n         * Now that velocities are rotated, you can use 1D conservation of momentum\r\n         * equations to calculate the final vel along the x-axis.\r\n         */\r\n        let vFinal: Vector2[] = [\r\n            // final rotated vel for b[0]\r\n            new Vector2(((b1.mass - b2.mass) * vTemp[0].x + 2 * b2.mass * vTemp[1].x) / (b1.mass + b2.mass), vTemp[0].y),\r\n            // final rotated vel for b[0]\r\n            new Vector2(((b2.mass - b1.mass) * vTemp[1].x + 2 * b1.mass * vTemp[0].x) / (b1.mass + b2.mass), vTemp[1].y)\r\n        ];\r\n        // hack to avoid clumping\r\n        bTemp[0].add(new Vector2(vFinal[0].x, 0));\r\n        bTemp[1].add(new Vector2(vFinal[1].x, 0));\r\n\r\n        /*\r\n         * Rotate ball poss and velocities back Reverse signs in trig expressions\r\n         * to rotate in the opposite direction\r\n         */\r\n        // rotate balls\r\n        let bFinal: Vector2[] = [new Vector2(cosine * bTemp[0].x - sine * bTemp[0].y, cosine * bTemp[0].y + sine * bTemp[0].x),\r\n        new Vector2(cosine * bTemp[1].x - sine * bTemp[1].y, cosine * bTemp[1].y + sine * bTemp[1].x)];\r\n\r\n        // update ball to screen pos\r\n        b1.setPos(b1.pos.add(bFinal[0]));\r\n        b2.setPos(b2.pos.add(bFinal[1]));\r\n\r\n        // update velocities\r\n        b1.setVel(new Vector2(cosine * vFinal[0].x - sine * vFinal[0].y, cosine * vFinal[0].y + sine * vFinal[0].x));\r\n        b2.setVel(new Vector2(cosine * vFinal[1].x - sine * vFinal[1].y, cosine * vFinal[1].y + sine * vFinal[1].x));\r\n\r\n        //\r\n        b1.setVel(b1.vel.multScalar(BB_RESTITUTION));\r\n        b2.setVel(b2.vel.multScalar(BB_RESTITUTION));\r\n\r\n        //check if velocities are low enough to set the balls to rest\r\n        if (b1.vel.length() < MIN_VEL) {\r\n            b1.setVel(new Vector2(0, 0));\r\n            b1.atRest = true;\r\n        }\r\n        if (b2.vel.length() < MIN_VEL) {\r\n            b2.setVel(new Vector2(0, 0));\r\n            b2.atRest = true;\r\n        }\r\n\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport { Redirect } from 'react-router-dom'\r\nimport Pegboard from './Pegboard'\r\nimport * as PIXI from 'pixi.js'\r\nimport { screenBounds } from '../IDrawable'\r\n\r\n/**\r\n * CONSTANTS\r\n */\r\nconst BOARDLEN = 20;\r\nconst updateTicker = new PIXI.Ticker();\r\ninterface iState {\r\n    paused: boolean,\r\n    goBack: boolean\r\n}\r\nexport default class pegboardSim extends Component<{}, iState>{\r\n    protected renderTarget: HTMLDivElement\r\n    protected G: PIXI.Graphics\r\n    protected app: PIXI.Application\r\n    protected prevUpdateTime: number\r\n    protected screen: screenBounds\r\n    protected timeoutPtr: any //weird js pointer type\r\n    readonly fps: number = 244;\r\n    protected title: string\r\n\r\n    board: Pegboard;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            paused: false,\r\n            goBack: false\r\n        }\r\n        //this.title = props.title\r\n        this.G = new PIXI.Graphics();\r\n        updateTicker.autoStart = true;\r\n    }\r\n\r\n    initPIXI = (backgroundColor: number) => {\r\n        //TODO: on resize reinit application and reassign this.G\r\n        //FIXME: get accurate canvas size from dom\r\n        this.app = new PIXI.Application({\r\n            width: window.innerWidth,//this.screen.screenWidth,\r\n            height: window.innerHeight, // this.screen.screenHeight,\r\n            backgroundColor: backgroundColor,\r\n            antialias: true\r\n        });\r\n        this.renderTarget.appendChild(this.app.view);\r\n        this.app.start(); //start renderer internal update ticker;\r\n        this.app.stage.addChild(this.G);\r\n        this.board = new Pegboard(this.app.stage, [this.screen.startX,this.screen.endX], [this.screen.startY, this.screen.endY]);\r\n    }\r\n\r\n    initSim = () => {\r\n        console.log('initsim called')\r\n        if (this.timeoutPtr) clearTimeout(this.timeoutPtr);\r\n        if (this.board) this.G.clear();\r\n\r\n        this.app.stage.addChild(this.G);\r\n        updateTicker.add(deltaT=>this.update(deltaT/70));\r\n    }\r\n    componentDidMount() {\r\n        console.log(this.renderTarget.getBoundingClientRect())\r\n        let sw = document.getElementById('sim')?.clientWidth;\r\n        let sh = document.getElementById('sim')?.clientHeight;\r\n        sw = sw ? sw : window.innerWidth;\r\n        sh = sh? sh: window.innerHeight\r\n    \r\n        let ratio = sw/sh;\r\n\r\n\r\n        this.screen = {\r\n            screenWidth: sw, \r\n            screenHeight: sh, \r\n            startX: -ratio * BOARDLEN / 2, endX: ratio * BOARDLEN/2,\r\n            startY: -BOARDLEN, endY: 0\r\n        }\r\n\r\n        console.log(this.screen.screenWidth, this.screen.screenHeight)\r\n        this.initPIXI(0x997950); //wood background\r\n        this.initSim();\r\n    }\r\n\r\n    \r\n\r\n    draw = () => {\r\n        this.G.clear();\r\n        this.G.beginFill(0);\r\n        this.board.draw(this.screen);\r\n        this.G.endFill();\r\n    }\r\n\r\n    update = (deltaT: number) => {\r\n        if (this.state.paused) return;\r\n        \r\n        /**UPDATE LOGIC */\r\n\r\n        //update vel, pos\r\n        this.board.step(deltaT);\r\n        this.draw();\r\n    }\r\n\r\n    debounced = true;\r\n    handlePress = (e: KeyboardEvent) => {\r\n        if (e.code === 'Space' && this.debounced) {\r\n            this.board.spawnBall(); \r\n            this.debounced = false;\r\n        }\r\n\r\n        setTimeout(() => { this.debounced = true }, 250);\r\n    }\r\n\r\n    render() {\r\n        if (this.state.goBack) return <Redirect to={{ pathname: '/' }} />\r\n        let component = this;\r\n        document.addEventListener('keyup', (e) => { this.handlePress(e) });\r\n        return (\r\n            <div className=\"sim-wrapper\">\r\n                <div className=\"sim-header\">Pegboard Simulation</div>\r\n\r\n                <div className=\"sim-sidebar\">\r\n                    <div className=\"back-butt\" onClick={(e) => this.setState({ goBack: true })}>back</div>\r\n                    <div className=\"pause-butt\" onClick={(e) => this.setState({ paused: !this.state.paused })}>{!this.state.paused ? 'pause' : 'unpause'}</div>\r\n                    <div className=\"restart-butt\" onClick={(e) => this.initSim()}>restart</div>\r\n\r\n                    {/** this is where you place any misc inputs to your sim and bind them to state*/}\r\n\r\n                </div>\r\n\r\n                <div className=\"sim-content\" id = 'sim' ref={(thisDiv: HTMLDivElement) => { component.renderTarget = thisDiv }}\r\n                    onMouseMove={(e) => { }}\r\n                />\r\n                <div className=\"sim-footer\">Written by Theo Cooper</div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n}\r\n\r\n","import React, { Component } from 'react'\r\nimport { Route, Redirect } from \"react-router-dom\";\r\n\r\n\r\ninterface iprops{\r\n    link: string,\r\n    preview_img: any,\r\n    title: string,\r\n    description: string\r\n}\r\ninterface istate{\r\n    isClicked:boolean,\r\n    isHovered:boolean\r\n}\r\n\r\nexport default class PreviewCard extends Component<iprops,istate> {\r\n    constructor(props:iprops){\r\n        super(props);\r\n        this.state = {isClicked:false, isHovered:false};\r\n    }\r\n    render() {\r\n        //fuxk it write the hover css later stop being a dumbass\r\n        if(this.state.isClicked) return <Redirect to = {{pathname: this.props.link}} />\r\n        //TODO: add preview\r\n        return (\r\n            <div className='rounded-lg bg-purple-800 p-4 w-36 text-white m-3' onClick={(e) => this.setState({isClicked:true})}>\r\n                <div className = 'hover:underline'>{this.props.title}</div>\r\n                <div className= 'text-center text-blue-400'>{this.props.description}</div>\r\n            \r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react'\r\nimport PreviewCard from './PreviewCard' \r\n\r\n//WRITEME Tailwindcss\r\nconst testimg = require('./resources/rand.jpg'); //FIXME: get image to load properly\r\nexport const Home = () => {\r\n    return (\r\n        <div className = \" bg-gray-400\">\r\n            <div className = \"text-align:center h-52\">\r\n                <div className = 'font-sans text-6xl text-white p-10'>Welcome to the home of Theo's physics sims</div>\r\n                <div className = 'pl-24 text-xl'>you will notice it looks like shit bc im too lazy to write the css to make it pretty</div>\r\n            </div>\r\n            <div className=' grid auto-cols-auto bg-gray-600'>\r\n                <PreviewCard link = '/testsim' preview_img = {testimg} title = 'Basic blank render with a circle' description = 'Purely for testing purposes.'/>\r\n                <PreviewCard link = '/particlesim' preview_img = {testimg} title = '2d particle motion' description = 'demonstrates kinematic equations'/>\r\n                <PreviewCard link = '/orbitsim' preview_img = {testimg} title = '2d orbit' description = 'demonstrates universal gravitation'/>\r\n                <PreviewCard link = '/pegboard' preview_img = {testimg} title = 'Pegboard Simulation' description = 'demonstrates normal distrobution'/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React,{useEffect} from 'react';\r\nimport {Switch, Route} from 'react-router-dom';\r\nimport * as SIMS from './simulation'\r\n\r\nimport {Home} from './Home';\r\n\r\nexport const App = () => { //Functional Component\r\n\r\n  useEffect(()=>{ // onmount\r\n  },[])\r\n\r\n\r\n  //TODO: deploy base mvp to github pages\r\n  return (\r\n        <Switch>\r\n          <Route exact path = '/' component = {Home}/>\r\n          <Route exact path = '/testsim' component = {SIMS.BlankTestSim} />\r\n          <Route exact path = '/particlesim' component = {SIMS.BasicParticleSim} />\r\n          <Route exact path = '/orbitsim' component = {SIMS.OrbitSim} />\r\n          <Route exact path = '/pegboard' component = {SIMS.pegboardSim} />\r\n        </Switch>\r\n  );\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {App} from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport {HashRouter} from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <HashRouter>\r\n      <App />\r\n    </HashRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}