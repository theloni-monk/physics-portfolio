{"version":3,"sources":["resources/rand.jpg","simulation/BlankTestSim.tsx","simulation/GenericSim.tsx","simulation/utils/vect.ts","simulation/BasicParticleSim.tsx","simulation/OrbitSim.tsx","PreviewCard.tsx","Home.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","BlankTestSim","props","title","draw","G","lineStyle","beginFill","drawCircle","endFill","update","setTimeout","handlePress","e","this","screen","screenHeight","window","innerHeight","screenWidth","innerWidth","startX","endX","startY","endY","initPIXI","component","document","addEventListener","className","ref","thisDiv","renderTarget","onMouseMove","rest","app","prevUpdateTime","fps","backgroundColor","PIXI","width","height","antialias","appendChild","view","start","stage","addChild","Date","now","Component","Vector2","x","y","toString","length","Math","sqrt","isZero","radians","atan2","congugate","norm","multScalar","inv","add","other","sub","s","dot","fromPolar","r","theta","cos","sin","Particle","p","v","a","pos","vel","acc","g","setPos","setVel","setAcc","t","sb","scaleh","scalew","px","py","clear","pxPos","posToPx","BasicParticleSim","timeoutPtr","ball","state","paused","deltaT","Number","dampingLevel","goBack","console","log","getBoundingClientRect","initSim","clearTimeout","to","pathname","onClick","setState","type","min","max","value","onChange","target","COORDSPACE","GravBody","mass","drawEllipse","F","rVel","String","PLANET_RAD","PreviewCard","isClicked","isHovered","link","description","testimg","require","Home","preview_img","App","useEffect","exact","path","SIMS","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.69242959.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/rand.7fb5be4a.jpg\";","import React from 'react'\r\nimport GenericSim from './GenericSim'\r\n\r\ninterface iprops{\r\n    title: string\r\n}\r\nexport class BlankTestSim extends GenericSim{\r\n    //WRITME: basic ball collision sim\r\n    constructor(props:iprops){\r\n        super(props.title);\r\n    }\r\n    componentDidMount(){\r\n        this.screen = {\r\n            screenHeight:window.innerHeight, \r\n            screenWidth:window.innerWidth,\r\n            startX: 0, endX: 15,\r\n            startY: 0, endY: 10\r\n        }\r\n        this.initPIXI(0);\r\n        this.update()\r\n    }\r\n\r\n\r\n    draw = () =>{\r\n        // Circle\r\n        this.G.lineStyle(0); // draw a circle, set the lineStyle to zero so the circle doesn't have an outline\r\n        this.G.beginFill(0xDE3249, 1);\r\n        this.G.drawCircle(100, 250, 50);\r\n        this.G.endFill();\r\n    }\r\n\r\n    update = () =>{\r\n        this.draw();\r\n\r\n        setTimeout(this.update, 16.7);\r\n    }\r\n\r\n    handlePress = (e:KeyboardEvent) => {\r\n\r\n    }\r\n\r\n    render() {\r\n        let component = this;\r\n\t\tdocument.addEventListener('keyup', (e) => { this.handlePress(e) });\r\n\t\treturn (\r\n\t\t\t<div className=\"GameFrameWrapper\">\r\n\t\t\t\t<div ref={(thisDiv: HTMLDivElement) => { component.renderTarget = thisDiv }}\r\n\t\t\t\t\tonMouseMove={(e) => {  }}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t); //\r\n    }\r\n}\r\n","import { Component } from 'react'\r\nimport * as PIXI from 'pixi.js'\r\nimport {screenBounds} from './IDrawable'\r\n\r\nexport default abstract class GenericSim extends Component {\r\n    protected renderTarget: HTMLDivElement\r\n    protected G: PIXI.Graphics\r\n    protected app: PIXI.Application\r\n    protected prevUpdateTime:number\r\n    protected screen:screenBounds \r\n\r\n    readonly fps:number = 60;\r\n    \r\n    protected title: string\r\n\r\n    constructor(title:string, ...rest:any[]){\r\n        super(rest);\r\n        this.title = title\r\n        this.G = new PIXI.Graphics();\r\n    }\r\n\r\n    initPIXI = (backgroundColor:number) =>{\r\n        //TODO: on resize reinit application and reassign this.G\r\n        this.app = new PIXI.Application({\r\n\t\t\twidth: this.screen.screenWidth,\r\n\t\t\theight: this.screen.screenHeight,\r\n\t\t\tbackgroundColor: backgroundColor,\r\n\t\t\tantialias: true\r\n\t\t});\r\n\t\tthis.renderTarget.appendChild(this.app.view);\r\n\t\tthis.app.start(); //start renderer internal update ticker;\r\n        this.app.stage.addChild(this.G);\r\n        this.prevUpdateTime = Date.now();\r\n    }\r\n\r\n    abstract handlePress(e:KeyboardEvent):void\r\n\r\n    /** @note must create a screenBounds object and call initPIXI */\r\n    abstract componentDidMount():void \r\n\r\n    abstract draw():void\r\n\r\n    abstract update():void\r\n    abstract render():JSX.Element\r\n}\r\n","/**@class Immutable Vector class, all methods return either properties or new vectors */\r\nexport default class Vector2 {\r\n    readonly x: number;\r\n    readonly y: number;\r\n\r\n    constructor(x: number, y: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    static fromPolar = (r: number, theta: number): Vector2 => new Vector2(r * Math.cos(theta), r * Math.sin(theta))\r\n\r\n\r\n    toString = ():string => 'x: ' + this.x.toString() + ', y: ' + this.y.toString()\r\n\r\n    length = (): number => Math.sqrt(this.x * this.x + (this.y * this.y))\r\n\r\n    isZero = (): boolean => this.length()<0.00001\r\n\r\n    radians = (): number => Math.atan2(this.y, this.x)\r\n\r\n    congugate = (): Vector2 => new Vector2(this.x, -this.y)\r\n\r\n    norm = (): Vector2 => this.multScalar(1/this.length())\r\n\r\n\r\n    inv = (): Vector2 => new Vector2(-this.x, -this.y)\r\n\r\n\r\n    add = (other: Vector2): Vector2 => new Vector2(this.x + other.x, this.y + other.y);\r\n\r\n\r\n    sub = (other: Vector2): Vector2 => new Vector2(this.x - other.x, this.y - other.y);\r\n\r\n\r\n    multScalar = (s: number): Vector2 => new Vector2(this.x * s, this.y * s)\r\n\r\n\r\n    dot = (other: Vector2): number => this.x * other.x + (this.y * other.y)\r\n\r\n}","import React,{Component} from 'react'\r\nimport * as PIXI from 'pixi.js'\r\nimport GenericSim from './GenericSim'\r\n\r\nimport Drawable, {screenBounds} from './IDrawable'\r\nimport DynamicBody from './IDynamicBody'\r\nimport Vector2 from './utils/vect'\r\n\r\nimport '../css/SimLayout.scss';\r\nimport { Redirect } from 'react-router-dom'\r\ninterface iparticle extends DynamicBody,Drawable{};\r\n\r\nclass Particle implements iparticle{\r\n    pos:Vector2 \r\n    vel:Vector2 \r\n    acc:Vector2\r\n    g:PIXI.Graphics\r\n    constructor(p:Vector2,v:Vector2,a:Vector2){\r\n        this.pos = p;\r\n        this.vel = v;\r\n        this.acc = a;\r\n        this.g = new PIXI.Graphics();\r\n    }\r\n    setPos = (p:Vector2) => this.pos = p;\r\n    setVel = (v:Vector2) => this.vel = v;\r\n    setAcc = (a:Vector2) => this.acc = a;\r\n\r\n    /**@param t - time difference between update calls ; must be in seconds _not ms_ */\r\n    update(t:number){\r\n        this.pos = this.pos.add(this.vel.multScalar(t));\r\n        this.vel = this.vel.add(this.acc.multScalar(t));\r\n    }\r\n\r\n    posToPx(sb:screenBounds){\r\n        let scaleh = (sb.endY - sb.startY) / sb.screenHeight;\r\n        //what one px corresponds to\r\n        let scalew = (sb.endX - sb.startX) / sb.screenWidth;\r\n        \r\n        let px = ((this.pos.x - sb.startX) / scalew);\r\n        let py = ((-1 * (this.pos.y - sb.endY)) / scaleh);\r\n        return new Vector2(px,py);\r\n    }\r\n\r\n    draw(sb:screenBounds){\r\n        this.g.clear();\r\n        let pxPos:Vector2 = this.posToPx(sb);\r\n        // Circle\r\n        this.g.lineStyle(0); //lineStyle to zero so the circle doesn't have an outline\r\n        this.g.beginFill(0xDE3249, 1);\r\n        this.g.drawCircle(pxPos.x, pxPos.y, 20); //20px size is totally arbitrary but will be fine for now\r\n        this.g.endFill();\r\n    }\r\n    \r\n}\r\n\r\ninterface iprops{\r\n    title: string\r\n}\r\ninterface istate{\r\n    goBack:boolean,\r\n    paused:boolean,\r\n    dampingLevel: string\r\n}\r\nexport default class BasicParticleSim extends Component<iprops,istate> {\r\n    protected renderTarget: HTMLDivElement\r\n    protected G: PIXI.Graphics\r\n    protected app: PIXI.Application\r\n    protected prevUpdateTime:number\r\n    protected screen:screenBounds \r\n    protected timeoutPtr: any //weird js pointer type\r\n\r\n    readonly fps:number = 60;\r\n\r\n    protected title: string\r\n\r\n    /**UNIQUE SIM VARIABLES */\r\n    ball:Particle\r\n\r\n    constructor(props:iprops){\r\n        super(props);\r\n        this.state = {\r\n            goBack:false,\r\n            paused:false,\r\n            dampingLevel: '0.5'\r\n        }\r\n        //this.title = props.title\r\n        this.G = new PIXI.Graphics();\r\n    }\r\n\r\n    initPIXI = (backgroundColor:number) =>{\r\n        //TODO: on resize reinit application and reassign this.G\r\n        //FIXME: get accurate canvas size from dom\r\n        this.app = new PIXI.Application({\r\n\t\t\twidth: window.innerWidth ,//this.screen.screenWidth,\r\n\t\t\theight: window.innerHeight, // this.screen.screenHeight,\r\n\t\t\tbackgroundColor: backgroundColor,\r\n\t\t\tantialias: true\r\n\t\t});\r\n\t\tthis.renderTarget.appendChild(this.app.view);\r\n\t\tthis.app.start(); //start renderer internal update ticker;\r\n        this.app.stage.addChild(this.G);\r\n    }\r\n\r\n    componentDidMount(){\r\n        console.log(this.renderTarget.getBoundingClientRect())\r\n        this.screen = {\r\n            screenWidth: (window.innerWidth), //this.renderTarget.getBoundingClientRect().width,\r\n            screenHeight: window.innerHeight, //this.renderTarget.getBoundingClientRect().height, \r\n            startX: 0, endX: 15,\r\n            startY: 0, endY: 10\r\n        }\r\n        this.initPIXI(0); //black background\r\n        this.initSim()\r\n    }\r\n\r\n    initSim(){\r\n        if(this.timeoutPtr) clearTimeout(this.timeoutPtr);\r\n        if(this.ball) this.ball.g.clear();\r\n        this.ball = new Particle(\r\n            new Vector2(2,0), // pos (5,0)\r\n            new Vector2(3,7), // 3m/s horizontal 7m/s upward initial velocity\r\n            new Vector2(0,-10) // -10m/s/s downward acceleration due to gravity\r\n        );\r\n        this.app.stage.addChild(this.ball.g)\r\n        this.update();\r\n    }\r\n\r\n    draw = () =>{\r\n        this.ball.draw(this.screen)\r\n    }\r\n\r\n    update = () =>{\r\n        if(this.state.paused) {this.prevUpdateTime = Date.now(); return}\r\n        if(!this.prevUpdateTime) this.prevUpdateTime = Date.now();\r\n        let deltaT = (Date.now() - this.prevUpdateTime)/1000\r\n        /**UPDATE LOGIC */\r\n        this.ball.update(deltaT);\r\n        //constrain ball to window bounds in X\r\n        if(this.ball.pos.x<this.screen.startX || this.ball.pos.x > this.screen.endX){\r\n            this.ball.setAcc(new Vector2(0,0));\r\n            this.ball.setVel(new Vector2(0,0));\r\n        }\r\n        if(this.ball.pos.y<this.screen.startY){\r\n            this.ball.setPos(new Vector2(this.ball.pos.x, this.screen.startY)) // avoid double collision registration\r\n            this.ball.setVel(new Vector2(this.ball.vel.x,-this.ball.vel.y* (1 - Number(this.state.dampingLevel)/10))); // bounce off of floor\r\n        }\r\n\r\n        this.draw();\r\n        this.prevUpdateTime = Date.now();\r\n        this.timeoutPtr = setTimeout(this.update, 16.66); //~60fps\r\n    }\r\n\r\n    handlePress = (e:KeyboardEvent) => {\r\n\r\n    }\r\n\r\n    render() {\r\n        if(this.state.goBack) return <Redirect to = {{pathname:'/'}}/>\r\n        let component = this;\r\n\t\tdocument.addEventListener('keyup', (e) => { this.handlePress(e) });\r\n\t\treturn (\r\n            <div className =\"sim-wrapper\">\r\n                <div className = \"sim-header\">Basic Bouncing Ball</div>\r\n                <div className=\"sim-sidebar\" >\r\n                    <div className = \"back-butt\" onClick={(e)=>this.setState({goBack:true})}>back</div>\r\n                    <div className = \"pause-butt\" onClick = {(e)=>this.setState({paused:!this.state.paused})}>{!this.state.paused?'pause':'unpause'}</div>\r\n                    <div className = \"restart-butt\" onClick = {(e)=>this.initSim()}>restart</div>\r\n                    {/** this is where you place any misc inputs to your sim and bind them to state*/}\r\n                    <div className = \"num-input\">\r\n                        <em>damping level:</em>\r\n                        {/**TODO: make custom input component */}\r\n                        <input className = \"slider\" type=\"range\" min=\"0\" max=\"10\" value={this.state.dampingLevel} onChange={(v)=>this.setState({dampingLevel: v.target.value})}/>\r\n                    </div>\r\n                </div>\r\n                <div className = \"sim-content\" ref={(thisDiv: HTMLDivElement) => { component.renderTarget = thisDiv }}\r\n                        onMouseMove={(e) => {  }}\r\n                    />\r\n                <div className = \"sim-footer\">written by theo cooper</div>\r\n                \r\n            </div>\r\n\t\t);\r\n    }\r\n}\r\n","import React,{Component} from 'react'\r\nimport * as PIXI from 'pixi.js'\r\nimport GenericSim from './GenericSim'\r\n//TODO organize all this code\r\nimport Drawable, {screenBounds} from './IDrawable'\r\nimport DynamicBody from './IDynamicBody'\r\nimport Vector2 from './utils/vect'\r\n\r\nimport '../css/SimLayout.scss';\r\nimport { Redirect } from 'react-router-dom'\r\n/**SIM CONSTANTS */\r\nconst COORDSPACE = [-15, 15, -10, 10] // km\r\n//what one px corresponds to\r\nconst scalew = (width:number): number => (COORDSPACE[1] - COORDSPACE[0]) / width;\r\nconst scaleh = (height:number): number => (COORDSPACE[3] - COORDSPACE[2]) / height;\r\n        \r\n\r\nconst PLANET_RAD = 3.1855 //km\r\nconst BODY_RAD = 0.5 //km(idk)\r\nconst PLANET_MASS = 6000000000000 //kg\r\nconst ESCAPE_VEL =  3.1 //km/s\r\nconst GRAV_CONST = 0.0000000000066 \r\n\r\n/**UNIQUE ACTOR */\r\ninterface igrav extends DynamicBody, Drawable{};\r\nclass GravBody implements igrav{\r\n    pos:Vector2 \r\n    vel:Vector2 \r\n    acc:Vector2\r\n\r\n    mass: number\r\n\r\n    g:PIXI.Graphics\r\n    constructor(p:Vector2,v:Vector2,a:Vector2, mass:number){\r\n        this.pos = p;\r\n        this.vel = v;\r\n        this.acc = a;\r\n\r\n        this.mass = mass;\r\n\r\n        this.g = new PIXI.Graphics();\r\n    }\r\n    setPos = (p:Vector2) => this.pos = p;\r\n    setVel = (v:Vector2) => this.vel = v;\r\n    setAcc = (a:Vector2) => this.acc = a;\r\n\r\n    /**@param t - time difference between update calls ; must be in seconds _not ms_ */\r\n    update(t:number){\r\n        this.pos = this.pos.add(this.vel.multScalar(t)); \r\n        this.vel = this.vel.add(this.acc.multScalar(t));\r\n    }\r\n\r\n    posToPx(sb:screenBounds){\r\n        let px = ((this.pos.x - sb.startX) / scalew(sb.screenWidth));\r\n        let py = ((-1 * (this.pos.y - sb.endY)) / scaleh(sb.screenHeight));\r\n        return new Vector2(px,py);\r\n    }\r\n\r\n    draw(sb:screenBounds){\r\n        this.g.clear();\r\n        let pxPos:Vector2 = this.posToPx(sb);\r\n        // Circle\r\n        this.g.lineStyle(0); //lineStyle to zero so the circle doesn't have an outline\r\n        this.g.beginFill(0x000000, 1);\r\n        this.g.drawEllipse(pxPos.x, pxPos.y, BODY_RAD / scalew(sb.screenWidth), BODY_RAD / scaleh(sb.screenHeight)); //20px size is totally arbitrary but will be fine for now\r\n        this.g.endFill();\r\n    }\r\n}\r\n\r\n/**LAYOUT */\r\ninterface iprops{\r\n    title: string\r\n}\r\ninterface istate{\r\n    goBack:boolean,\r\n    paused:boolean,\r\n    rVel: string\r\n}\r\nexport default class BasicParticleSim extends Component<iprops,istate> {\r\n    protected renderTarget: HTMLDivElement\r\n    protected G: PIXI.Graphics\r\n    protected app: PIXI.Application\r\n    protected prevUpdateTime:number\r\n    protected screen:screenBounds \r\n    protected timeoutPtr: any //weird js pointer type\r\n\r\n    readonly fps:number = 60;\r\n\r\n    protected title: string\r\n\r\n    /**UNIQUE SIM VARIABLES */\r\n    ball:GravBody\r\n\r\n    constructor(props:iprops){\r\n        super(props);\r\n        this.state = {\r\n            goBack:false,\r\n            paused:false,\r\n            rVel: String(ESCAPE_VEL)\r\n        }\r\n        //this.title = props.title\r\n        this.G = new PIXI.Graphics();\r\n    }\r\n\r\n    initPIXI = (backgroundColor:number) =>{\r\n        //TODO: on resize reinit application and reassign this.G\r\n        //FIXME: get accurate canvas size from dom\r\n        this.app = new PIXI.Application({\r\n\t\t\twidth: window.innerWidth ,//this.screen.screenWidth,\r\n\t\t\theight: window.innerHeight, // this.screen.screenHeight,\r\n\t\t\tbackgroundColor: backgroundColor,\r\n\t\t\tantialias: true\r\n\t\t});\r\n\t\tthis.renderTarget.appendChild(this.app.view);\r\n\t\tthis.app.start(); //start renderer internal update ticker;\r\n        this.app.stage.addChild(this.G);\r\n    }\r\n\r\n    componentDidMount(){\r\n        console.log(this.renderTarget.getBoundingClientRect())\r\n        this.screen = {\r\n            screenWidth: (window.innerWidth), //this.renderTarget.getBoundingClientRect().width,\r\n            screenHeight: window.innerHeight, //this.renderTarget.getBoundingClientRect().height, \r\n            startX: COORDSPACE[0], endX: COORDSPACE[1],\r\n            startY: COORDSPACE[2], endY: COORDSPACE[3]\r\n        }\r\n        console.log(scalew(this.screen.screenWidth), scaleh(this.screen.screenHeight))\r\n        this.initPIXI(0xAFAFAF); //white background\r\n        this.initSim()\r\n    }\r\n\r\n    initSim(){\r\n        console.log('initsim called')\r\n        if(this.timeoutPtr) clearTimeout(this.timeoutPtr);\r\n        if(this.ball) this.ball.g.clear();\r\n        this.ball = new GravBody(\r\n            new Vector2(0,PLANET_RAD+BODY_RAD), // pos (5,0)\r\n            new Vector2(Number(this.state.rVel), 0), // horizontal\r\n            new Vector2(0,0), // -10m/s/s downward acceleration due to gravity\r\n            5\r\n        );\r\n        this.app.stage.addChild(this.G);\r\n        this.app.stage.addChild(this.ball.g)\r\n        this.update();\r\n    }\r\n\r\n    draw = () =>{\r\n        //draw planet\r\n        this.G.clear();\r\n        this.G.lineStyle(0); //lineStyle to zero so the circle doesn't have an outline\r\n        this.G.beginFill(0xDE3249, 1);\r\n        this.G.drawEllipse(this.screen.screenWidth/2, this.screen.screenHeight/2, PLANET_RAD / scalew(this.screen.screenWidth), PLANET_RAD / scaleh(this.screen.screenHeight));\r\n        this.G.endFill();\r\n        this.ball.draw(this.screen);\r\n    }\r\n\r\n    update = () =>{\r\n        if(this.state.paused) {this.prevUpdateTime = Date.now(); return}\r\n        if(!this.prevUpdateTime) this.prevUpdateTime = Date.now();\r\n        let deltaT = (Date.now() - this.prevUpdateTime)/1000;\r\n        \r\n\r\n        /**UPDATE LOGIC */\r\n        let r:Vector2 = this.ball.pos; //displacement vector\r\n        // resultent force vector\r\n        let F:Vector2 = r.norm().multScalar( -GRAV_CONST * PLANET_MASS * this.ball.mass / (r.length() ** 2) ); \r\n        \r\n        //ACC from force vector\r\n        //console.log(`${A}`)\r\n        this.ball.setAcc(F.multScalar(1/this.ball.mass));\r\n       \r\n        \r\n        \r\n        //constrict ball to window\r\n        if(this.ball.pos.x<this.screen.startX || this.ball.pos.x > this.screen.endX || this.ball.pos.y<this.screen.startY|| this.ball.pos.y>this.screen.endY){\r\n            //console.log('ball constricted to window')\r\n            this.ball.setAcc(new Vector2(0,0));\r\n            this.ball.setVel(new Vector2(0,0));\r\n        }\r\n        //stop on coll with planet\r\n        if(r.length() < PLANET_RAD){\r\n            //console.log('ball stopped on collision with planet')\r\n            this.ball.setAcc(new Vector2(0,0));\r\n            this.ball.setVel(new Vector2(0,0));\r\n        }\r\n\r\n        //update vel, pos\r\n        this.ball.update(deltaT);\r\n        this.draw();\r\n        this.prevUpdateTime = Date.now();\r\n        this.timeoutPtr = setTimeout(this.update, 16.66); //~60fps\r\n        return;\r\n    }\r\n\r\n    handlePress = (e:KeyboardEvent) => {\r\n\r\n    }\r\n \r\n    render() {\r\n        if(this.state.goBack) return <Redirect to = {{pathname:'/'}}/>\r\n        let component = this;\r\n\t\tdocument.addEventListener('keyup', (e) => { this.handlePress(e) });\r\n\t\treturn (\r\n            <div className =\"sim-wrapper\">\r\n                <div className = \"sim-header\">Orbit Simulation</div>\r\n                <div className=\"sim-sidebar\" >\r\n                    <div className = \"back-butt\" onClick={(e)=>this.setState({goBack:true})}>back</div>\r\n                    <div className = \"pause-butt\" onClick = {(e)=>this.setState({paused:!this.state.paused})}>{!this.state.paused?'pause':'unpause'}</div>\r\n                    <div className = \"restart-butt\" onClick = {(e)=>this.initSim()}>restart</div>\r\n                     \r\n                    {/** this is where you place any misc inputs to your sim and bind them to state*/}\r\n                    \r\n                    <div className = \"num-input\">\r\n                        <em>Initial rightward velocity: (km/s)</em>\r\n                        {/**TODO: make custom input component */}\r\n                       1<input className = \"slider\" type=\"range\" min=\"1\" max=\"5\" value={this.state.rVel} onChange={(v)=>this.setState({rVel: v.target.value})}/>5\r\n                    </div>\r\n                    \r\n                </div>\r\n                <div className = \"sim-content\" ref={(thisDiv: HTMLDivElement) => { component.renderTarget = thisDiv }}\r\n                        onMouseMove={(e) => {  }}\r\n                    />\r\n                <div className = \"sim-footer\">Written by Theo Cooper</div>\r\n                \r\n            </div>\r\n\t\t);\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Route, Redirect } from \"react-router-dom\";\r\n\r\nimport './css/PreviewCard.scss'\r\n\r\ninterface iprops{\r\n    link: string,\r\n    preview_img: any,\r\n    title: string,\r\n    description: string\r\n}\r\ninterface istate{\r\n    isClicked:boolean,\r\n    isHovered:boolean\r\n}\r\n\r\nexport default class PreviewCard extends Component<iprops,istate> {\r\n    constructor(props:iprops){\r\n        super(props);\r\n        this.state = {isClicked:false, isHovered:false};\r\n    }\r\n    render() {\r\n        //fuxk it write the hover css later stop being a dumbass\r\n        if(this.state.isClicked) return <Redirect to = {{pathname: this.props.link}} />\r\n        return (\r\n            <div className='preview-card' onClick={(e) => this.setState({isClicked:true})}>\r\n                <div className = 'card-title'>{this.props.title}</div>\r\n                <div className= 'card-descriptor'><em>{this.props.description}</em></div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react'\r\nimport PreviewCard from './PreviewCard' \r\n\r\nimport './css/Home.scss'\r\n\r\nconst testimg = require('./resources/rand.jpg'); //FIXME: get image to load properly\r\nexport const Home = () => {\r\n    return (\r\n        <div className = 'home'>\r\n            <div className = 'home-heading'>\r\n                <h1>Welcome to the home of Theo's physics sims</h1>\r\n                <em>you will notice it looks like shit bc im too lazy to write the css to make it pretty</em>\r\n            </div>\r\n            <hr />\r\n            <h2>Anyways heres a link to some sims:</h2>\r\n            <div className='card-container'>\r\n                <PreviewCard link = '/testsim' preview_img = {testimg} title = 'Basic blank render with a circle' description = 'Purely for testing purposes.'/>\r\n                <PreviewCard link = '/particlesim' preview_img = {testimg} title = '2d particle motion' description = 'demonstrates kinematic equations'/>\r\n                <PreviewCard link = '/orbitsim' preview_img = {testimg} title = '2d orbit' description = 'demonstrates universal gravitation'/>\r\n           \r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React,{useEffect} from 'react';\r\nimport {Switch, Route} from 'react-router-dom';\r\nimport * as SIMS from './simulation'\r\n\r\nimport {Home} from './Home';\r\n\r\nexport const App = () => { //Functional Component\r\n\r\n  useEffect(()=>{ // onmount\r\n  },[])\r\n\r\n\r\n  //TODO: deploy base mvp to github pages\r\n  return (\r\n        <Switch>\r\n          <Route exact path = '/' component = {Home}/>\r\n          <Route exact path = '/testsim' component = {SIMS.BlankTestSim} />\r\n          <Route exact path = '/particlesim' component = {SIMS.BasicParticleSim} />\r\n          <Route exact path = '/orbitsim' component = {SIMS.OrbitSim} />\r\n        </Switch>\r\n  );\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './css/index.css';\r\nimport {App} from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport {HashRouter} from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <HashRouter>\r\n      <App />\r\n    </HashRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}