{"version":3,"sources":["resources/rand.jpg","simulation/BlankTestSim.tsx","simulation/GenericSim.tsx","simulation/utils/vect.ts","simulation/BasicParticleSim.tsx","PreviewCard.tsx","Home.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","BlankTestSim","props","title","draw","G","lineStyle","beginFill","drawCircle","endFill","update","setTimeout","handlePress","e","this","screen","screenHeight","window","innerHeight","screenWidth","innerWidth","startX","endX","startY","endY","initPIXI","component","document","addEventListener","className","ref","thisDiv","renderTarget","onMouseMove","rest","app","prevUpdateTime","fps","backgroundColor","PIXI","width","height","antialias","appendChild","view","start","stage","addChild","Date","now","Component","Vector2","x","y","length","Math","sqrt","radians","atan2","congugate","inv","add","other","sub","multScalar","s","dot","fromPolar","r","theta","cos","sin","Particle","p","v","a","pos","vel","acc","g","setPos","setVel","setAcc","t","sb","scaleh","scalew","px","py","clear","pxPos","posToPx","BasicParticleSim","ball","deltaT","state","goBack","to","pathname","onClick","setState","PreviewCard","isClicked","isHovered","link","description","testimg","require","Home","preview_img","App","useEffect","exact","path","SIMS","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.afd5a0e1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/rand.7fb5be4a.jpg\";","import React from 'react'\r\nimport GenericSim from './GenericSim'\r\n\r\ninterface iprops{\r\n    title: string\r\n}\r\nexport class BlankTestSim extends GenericSim{\r\n    //WRITME: basic ball collision sim\r\n    constructor(props:iprops){\r\n        super(props.title);\r\n    }\r\n    componentDidMount(){\r\n        this.screen = {\r\n            screenHeight:window.innerHeight, \r\n            screenWidth:window.innerWidth,\r\n            startX: 0, endX: 15,\r\n            startY: 0, endY: 10\r\n        }\r\n        this.initPIXI(0);\r\n        this.update()\r\n    }\r\n\r\n\r\n    draw = () =>{\r\n        // Circle\r\n        this.G.lineStyle(0); // draw a circle, set the lineStyle to zero so the circle doesn't have an outline\r\n        this.G.beginFill(0xDE3249, 1);\r\n        this.G.drawCircle(100, 250, 50);\r\n        this.G.endFill();\r\n    }\r\n\r\n    update = () =>{\r\n        this.draw();\r\n\r\n        setTimeout(this.update, 16.7);\r\n    }\r\n\r\n    handlePress = (e:KeyboardEvent) => {\r\n\r\n    }\r\n\r\n    render() {\r\n        let component = this;\r\n\t\tdocument.addEventListener('keyup', (e) => { this.handlePress(e) });\r\n\t\treturn (\r\n\t\t\t<div className=\"GameFrameWrapper\">\r\n\t\t\t\t<div ref={(thisDiv: HTMLDivElement) => { component.renderTarget = thisDiv }}\r\n\t\t\t\t\tonMouseMove={(e) => {  }}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t); //\r\n    }\r\n}\r\n","import { Component } from 'react'\r\nimport * as PIXI from 'pixi.js'\r\nimport {screenBounds} from './IDrawable'\r\n\r\nexport default abstract class GenericSim extends Component {\r\n    protected renderTarget: HTMLDivElement\r\n    protected G: PIXI.Graphics\r\n    protected app: PIXI.Application\r\n    protected prevUpdateTime:number\r\n    protected screen:screenBounds \r\n\r\n    readonly fps:number = 60;\r\n    \r\n    protected title: string\r\n\r\n    constructor(title:string, ...rest:any[]){\r\n        super(rest);\r\n        this.title = title\r\n        this.G = new PIXI.Graphics();\r\n    }\r\n\r\n    initPIXI = (backgroundColor:number) =>{\r\n        //TODO: on resize reinit application and reassign this.G\r\n        this.app = new PIXI.Application({\r\n\t\t\twidth: this.screen.screenWidth,\r\n\t\t\theight: this.screen.screenHeight,\r\n\t\t\tbackgroundColor: backgroundColor,\r\n\t\t\tantialias: true\r\n\t\t});\r\n\t\tthis.renderTarget.appendChild(this.app.view);\r\n\t\tthis.app.start(); //start renderer internal update ticker;\r\n        this.app.stage.addChild(this.G);\r\n        this.prevUpdateTime = Date.now();\r\n    }\r\n\r\n    abstract handlePress(e:KeyboardEvent):void\r\n\r\n    /** @note must create a screenBounds object and call initPIXI */\r\n    abstract componentDidMount():void \r\n\r\n    abstract draw():void\r\n\r\n    abstract update():void\r\n    abstract render():JSX.Element\r\n}\r\n","/**@class Immutable Vector class, all methods return either properties or new vectors */\r\nexport default class Vector2 {\r\n    readonly x: number;\r\n    readonly y: number;\r\n\r\n    constructor(x: number, y: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    static fromPolar = (r: number, theta: number): Vector2 => new Vector2(r * Math.cos(theta), r * Math.sin(theta))\r\n\r\n\r\n    length = (): number => Math.sqrt(this.x * this.x + (this.y * this.y))\r\n\r\n    radians = (): number => Math.atan2(this.y, this.x)\r\n\r\n    congugate = (): Vector2 => new Vector2(this.x, -this.y)\r\n\r\n\r\n    inv = (): Vector2 => new Vector2(-this.x, -this.y)\r\n\r\n\r\n    add = (other: Vector2): Vector2 => new Vector2(this.x + other.x, this.y + other.y);\r\n\r\n\r\n    sub = (other: Vector2): Vector2 => new Vector2(this.x - other.x, this.y - other.y);\r\n\r\n\r\n    multScalar = (s: number): Vector2 => new Vector2(this.x * s, this.y * s)\r\n\r\n\r\n    dot = (other: Vector2): number => this.x * other.x + (this.y * other.y)\r\n\r\n}","import React,{Component} from 'react'\r\nimport * as PIXI from 'pixi.js'\r\nimport GenericSim from './GenericSim'\r\n\r\nimport Drawable, {screenBounds} from './IDrawable'\r\nimport DynamicBody from './IDynamicBody'\r\nimport Vector2 from './utils/vect'\r\n\r\nimport '../css/SimLayout.scss';\r\nimport { Redirect } from 'react-router-dom'\r\ninterface iparticle extends DynamicBody,Drawable{};\r\n\r\nclass Particle implements iparticle{\r\n    pos:Vector2 \r\n    vel:Vector2 \r\n    acc:Vector2\r\n    g:PIXI.Graphics\r\n    constructor(p:Vector2,v:Vector2,a:Vector2){\r\n        this.pos = p;\r\n        this.vel = v;\r\n        this.acc = a;\r\n        this.g = new PIXI.Graphics();\r\n    }\r\n    setPos = (p:Vector2) => this.pos = p;\r\n    setVel = (v:Vector2) => this.vel = v;\r\n    setAcc = (a:Vector2) => this.acc = a;\r\n\r\n    /**@param t - time difference between update calls ; must be in seconds _not ms_ */\r\n    update(t:number){\r\n        this.pos = this.pos.add(this.vel.multScalar(t));\r\n        this.vel = this.vel.add(this.acc.multScalar(t));\r\n    }\r\n\r\n    posToPx(sb:screenBounds){\r\n        let scaleh = (sb.endY - sb.startY) / sb.screenHeight;\r\n        //what one px corresponds to\r\n        let scalew = (sb.endX - sb.startX) / sb.screenWidth;\r\n        \r\n        let px = ((this.pos.x - sb.startX) / scalew);\r\n        let py = ((-1 * (this.pos.y - sb.endY)) / scaleh);\r\n        return new Vector2(px,py);\r\n    }\r\n\r\n    draw(sb:screenBounds){\r\n        this.g.clear();\r\n        let pxPos:Vector2 = this.posToPx(sb);\r\n        // Circle\r\n        this.g.lineStyle(0); //lineStyle to zero so the circle doesn't have an outline\r\n        this.g.beginFill(0xDE3249, 1);\r\n        this.g.drawCircle(pxPos.x, pxPos.y, 20); //20px size is totally arbitrary but will be fine for now\r\n        this.g.endFill();\r\n    }\r\n}\r\n\r\ninterface iprops{\r\n    title: string\r\n}\r\ninterface istate{\r\n    goBack:boolean\r\n}\r\nexport default class BasicParticleSim extends Component<iprops,istate> {\r\n    protected renderTarget: HTMLDivElement\r\n    protected G: PIXI.Graphics\r\n    protected app: PIXI.Application\r\n    protected prevUpdateTime:number\r\n    protected screen:screenBounds \r\n\r\n    readonly fps:number = 60;\r\n    \r\n    protected title: string\r\n\r\n    ball:Particle\r\n    \r\n    constructor(props:iprops){\r\n        super(props);\r\n        this.state = {\r\n            goBack:false\r\n        }\r\n        //this.title = props.title\r\n        this.G = new PIXI.Graphics();\r\n    }\r\n\r\n    initPIXI = (backgroundColor:number) =>{\r\n        //TODO: on resize reinit application and reassign this.G\r\n        this.app = new PIXI.Application({\r\n\t\t\twidth: this.screen.screenWidth,\r\n\t\t\theight: this.screen.screenHeight,\r\n\t\t\tbackgroundColor: backgroundColor,\r\n\t\t\tantialias: true\r\n\t\t});\r\n\t\tthis.renderTarget.appendChild(this.app.view);\r\n\t\tthis.app.start(); //start renderer internal update ticker;\r\n        this.app.stage.addChild(this.G);\r\n        this.prevUpdateTime = Date.now();\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.screen = {\r\n            screenHeight:window.innerHeight, \r\n            screenWidth:window.innerWidth,\r\n            startX: 0, endX: 10,\r\n            startY: 0, endY: 3\r\n        }\r\n        this.initPIXI(0); //black background\r\n        \r\n        this.ball = new Particle(\r\n            new Vector2(2,0), // pos (5,0)\r\n            new Vector2(3,7), // 3m/s horizontal 7m/s upward initial velocity\r\n            new Vector2(0,-10) // -10m/s/s downward acceleration due to gravity\r\n        );\r\n        this.app.stage.addChild(this.ball.g)\r\n        this.update();\r\n    }\r\n\r\n    draw = () =>{\r\n        this.ball.draw(this.screen)\r\n    }\r\n\r\n    update = () =>{\r\n        let deltaT = (Date.now() - this.prevUpdateTime)/1000\r\n        this.ball.update(deltaT);\r\n        //constrain ball to window bounds\r\n        if(this.ball.pos.y<this.screen.startY || this.ball.pos.y > this.screen.endY || this.ball.pos.x<this.screen.startX || this.ball.pos.x > this.screen.endX){\r\n            this.ball.setAcc(new Vector2(0,0));\r\n            this.ball.setVel(new Vector2(0,0));\r\n        }\r\n        this.draw();\r\n        this.prevUpdateTime = Date.now();\r\n        setTimeout(this.update, 16.66); //~60fps\r\n    }\r\n\r\n    handlePress = (e:KeyboardEvent) => {\r\n\r\n    }\r\n\r\n    render() {\r\n        if(this.state.goBack) return <Redirect to = {{pathname:'/'}}/>\r\n        let component = this;\r\n\t\tdocument.addEventListener('keyup', (e) => { this.handlePress(e) });\r\n\t\treturn (\r\n            <div>\r\n                <div className=\"sim-sidebar\" >\r\n                    <div className = \"back-butt\" onClick={(e)=>this.setState({goBack:true})}>back</div>\r\n                </div>\r\n                <div className=\"sim-content\">\r\n                    <div ref={(thisDiv: HTMLDivElement) => { component.renderTarget = thisDiv }}\r\n                        onMouseMove={(e) => {  }}\r\n                    />\r\n                </div>\r\n            </div>\r\n\t\t); // TODO: add sidebar with controls and option to return to home\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Route, Redirect } from \"react-router-dom\";\r\n\r\nimport './css/PreviewCard.scss'\r\n\r\ninterface iprops{\r\n    link: string,\r\n    preview_img: any,\r\n    title: string,\r\n    description: string\r\n}\r\ninterface istate{\r\n    isClicked:boolean,\r\n    isHovered:boolean\r\n}\r\n\r\nexport default class PreviewCard extends Component<iprops,istate> {\r\n    constructor(props:iprops){\r\n        super(props);\r\n        this.state = {isClicked:false, isHovered:false};\r\n    }\r\n    render() {\r\n        //fuxk it write the hover css later stop being a dumbass\r\n        if(this.state.isClicked) return <Redirect to = {{pathname: this.props.link}} />\r\n        return (\r\n            <div className='preview-card' onClick={(e) => this.setState({isClicked:true})}>\r\n                <div className = 'card-title'>{this.props.title}</div>\r\n                <div className= 'card-descriptor'><em>{this.props.description}</em></div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react'\r\nimport PreviewCard from './PreviewCard' \r\n\r\nimport './css/Home.scss'\r\n\r\nconst testimg = require('./resources/rand.jpg'); //FIXME: get image to load properly\r\nexport const Home = () => {\r\n    return (\r\n        <div className = 'home'>\r\n            <div className = 'home-heading'>\r\n                <h1>Welcome to the home of Theo's physics sims</h1>\r\n                <em>you will notice it looks like shit bc im too lazy to write the css to make it pretty</em>\r\n            </div>\r\n            <hr />\r\n            <h2>Anyways heres a link to some sims:</h2>\r\n            <div className='card-container'>\r\n                <PreviewCard link = '/testsim' preview_img = {testimg} title = 'Basic blank render with a circle' description = 'Purely for testing purposes.'/>\r\n                <PreviewCard link = '/particlesim' preview_img = {testimg} title = '2d particle motion' description = 'demonstrates kinematic equations'/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React,{useEffect} from 'react';\r\nimport {Switch, Route} from 'react-router-dom';\r\nimport * as SIMS from './simulation'\r\n\r\nimport {Home} from './Home';\r\n\r\nexport const App = () => { //Functional Component\r\n\r\n  useEffect(()=>{ // onmount\r\n  },[])\r\n\r\n\r\n  //TODO: deploy base mvp to github pages\r\n  return (\r\n        <Switch>\r\n          <Route exact path = '/' component = {Home}/>\r\n          <Route exact path = '/testsim' component = {SIMS.BlankTestSim} />\r\n          <Route exact path = '/particlesim' component = {SIMS.BasicParticleSim} />\r\n        </Switch>\r\n  );\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './css/index.css';\r\nimport {App} from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport {HashRouter} from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <HashRouter>\r\n      <App />\r\n    </HashRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}