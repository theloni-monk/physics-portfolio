[{"C:\\Users\\TheoA\\Documents\\Github\\physics-portfolio\\src\\serviceWorker.ts":"1","C:\\Users\\TheoA\\Documents\\Github\\physics-portfolio\\src\\App.tsx":"2","C:\\Users\\TheoA\\Documents\\Github\\physics-portfolio\\src\\Home.tsx":"3","C:\\Users\\TheoA\\Documents\\Github\\physics-portfolio\\src\\simulation\\index.ts":"4","C:\\Users\\TheoA\\Documents\\Github\\physics-portfolio\\src\\PreviewCard.tsx":"5","C:\\Users\\TheoA\\Documents\\Github\\physics-portfolio\\src\\simulation\\BlankTestSim.tsx":"6","C:\\Users\\TheoA\\Documents\\Github\\physics-portfolio\\src\\simulation\\BasicParticleSim.tsx":"7","C:\\Users\\TheoA\\Documents\\Github\\physics-portfolio\\src\\simulation\\OrbitSim.tsx":"8","C:\\Users\\TheoA\\Documents\\Github\\physics-portfolio\\src\\simulation\\utils\\vect.ts":"9","C:\\Users\\TheoA\\Documents\\Github\\physics-portfolio\\src\\simulation\\GenericSim.tsx":"10","C:\\Users\\TheoA\\Documents\\Github\\physics-portfolio\\src\\simulation\\pegboardSim\\pegboardSim.tsx":"11","C:\\Users\\TheoA\\Documents\\Github\\physics-portfolio\\src\\simulation\\pegboardSim\\BallCollider.ts":"12","C:\\Users\\TheoA\\Documents\\Github\\physics-portfolio\\src\\simulation\\pegboardSim\\PegCollider.ts":"13","C:\\Users\\TheoA\\Documents\\Github\\physics-portfolio\\src\\simulation\\IDrawable.ts":"14","C:\\Users\\TheoA\\Documents\\Github\\physics-portfolio\\src\\index.js":"15","C:\\Users\\TheoA\\Documents\\Github\\physics-portfolio\\src\\simulation\\pegboardSim\\Pegboard.ts":"16","C:\\Users\\TheoA\\Documents\\Github\\physics-portfolio\\src\\simulation\\threebodySim\\threeBodySim.tsx":"17","C:\\Users\\TheoA\\Documents\\Github\\physics-portfolio\\src\\simulation\\threebodySim\\GravSystem.ts":"18","C:\\Users\\TheoA\\Documents\\Github\\physics-portfolio\\src\\simulation\\threebodySim\\GravBody.ts":"19"},{"size":5295,"mtime":499162500000,"results":"20","hashOfConfig":"21"},{"size":771,"mtime":1615610095499,"results":"22","hashOfConfig":"21"},{"size":1205,"mtime":1618788254294,"results":"23","hashOfConfig":"21"},{"size":344,"mtime":1615610066737,"results":"24","hashOfConfig":"21"},{"size":968,"mtime":1618788094510,"results":"25","hashOfConfig":"21"},{"size":1281,"mtime":1600975843544,"results":"26","hashOfConfig":"21"},{"size":6720,"mtime":1614990713023,"results":"27","hashOfConfig":"21"},{"size":8461,"mtime":1615599384969,"results":"28","hashOfConfig":"21"},{"size":1256,"mtime":1615194541875,"results":"29","hashOfConfig":"21"},{"size":1329,"mtime":1601770668133,"results":"30","hashOfConfig":"21"},{"size":4879,"mtime":1615609686892,"results":"31","hashOfConfig":"21"},{"size":2081,"mtime":1615589285731,"results":"32","hashOfConfig":"21"},{"size":1569,"mtime":1615589341898,"results":"33","hashOfConfig":"21"},{"size":793,"mtime":1609821983284,"results":"34","hashOfConfig":"21"},{"size":609,"mtime":1614989460931,"results":"35","hashOfConfig":"21"},{"size":12652,"mtime":1615594760773,"results":"36","hashOfConfig":"21"},{"size":4791,"mtime":1618788613898,"results":"37","hashOfConfig":"21"},{"size":1150,"mtime":1615610322001,"results":"38","hashOfConfig":"21"},{"size":2125,"mtime":1615599461070,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"g3q9e4",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"42"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"C:\\Users\\TheoA\\Documents\\Github\\physics-portfolio\\src\\serviceWorker.ts",[],["81","82"],"C:\\Users\\TheoA\\Documents\\Github\\physics-portfolio\\src\\App.tsx",[],"C:\\Users\\TheoA\\Documents\\Github\\physics-portfolio\\src\\Home.tsx",[],"C:\\Users\\TheoA\\Documents\\Github\\physics-portfolio\\src\\simulation\\index.ts",[],"C:\\Users\\TheoA\\Documents\\Github\\physics-portfolio\\src\\PreviewCard.tsx",["83"],"C:\\Users\\TheoA\\Documents\\Github\\physics-portfolio\\src\\simulation\\BlankTestSim.tsx",[],"C:\\Users\\TheoA\\Documents\\Github\\physics-portfolio\\src\\simulation\\BasicParticleSim.tsx",["84"],"import React,{Component} from 'react'\r\nimport * as PIXI from 'pixi.js'\r\nimport GenericSim from './GenericSim'\r\n\r\nimport Drawable, {screenBounds} from './IDrawable'\r\nimport DynamicBody from './IDynamicBody'\r\nimport Vector2 from './utils/vect'\r\n\r\nimport { Redirect } from 'react-router-dom'\r\ninterface iparticle extends DynamicBody,Drawable{};\r\n\r\nclass Particle implements iparticle{\r\n    pos:Vector2 \r\n    vel:Vector2 \r\n    acc:Vector2\r\n    g:PIXI.Graphics\r\n    constructor(p:Vector2,v:Vector2,a:Vector2){\r\n        this.pos = p;\r\n        this.vel = v;\r\n        this.acc = a;\r\n        this.g = new PIXI.Graphics();\r\n    }\r\n    setPos = (p:Vector2) => this.pos = p;\r\n    setVel = (v:Vector2) => this.vel = v;\r\n    setAcc = (a:Vector2) => this.acc = a;\r\n\r\n    /**@param t - time difference between update calls ; must be in seconds _not ms_ */\r\n    update(t:number){\r\n        this.pos = this.pos.add(this.vel.multScalar(t));\r\n        this.vel = this.vel.add(this.acc.multScalar(t));\r\n    }\r\n\r\n    posToPx(sb:screenBounds){\r\n        let scaleh = (sb.endY - sb.startY) / sb.screenHeight;\r\n        //what one px corresponds to\r\n        let scalew = (sb.endX - sb.startX) / sb.screenWidth;\r\n        \r\n        let px = ((this.pos.x - sb.startX) / scalew);\r\n        let py = ((-1 * (this.pos.y - sb.endY)) / scaleh);\r\n        return new Vector2(px,py);\r\n    }\r\n\r\n    draw(sb:screenBounds){\r\n        this.g.clear();\r\n        let pxPos:Vector2 = this.posToPx(sb);\r\n        // Circle\r\n        this.g.lineStyle(0); //lineStyle to zero so the circle doesn't have an outline\r\n        this.g.beginFill(0xDE3249, 1);\r\n        this.g.drawCircle(pxPos.x, pxPos.y, 20); //20px size is totally arbitrary but will be fine for now\r\n        this.g.endFill();\r\n    }\r\n    \r\n}\r\n\r\ninterface iprops{\r\n    title: string\r\n}\r\ninterface istate{\r\n    goBack:boolean,\r\n    paused:boolean,\r\n    dampingLevel: string\r\n}\r\nexport default class BasicParticleSim extends Component<iprops,istate> {\r\n    protected renderTarget: HTMLDivElement\r\n    protected G: PIXI.Graphics\r\n    protected app: PIXI.Application\r\n    protected prevUpdateTime:number\r\n    protected screen:screenBounds \r\n    protected timeoutPtr: any //weird js pointer type\r\n\r\n    readonly fps:number = 60;\r\n\r\n    protected title: string\r\n\r\n    /**UNIQUE SIM VARIABLES */\r\n    ball:Particle\r\n\r\n    constructor(props:iprops){\r\n        super(props);\r\n        this.state = {\r\n            goBack:false,\r\n            paused:false,\r\n            dampingLevel: '0.5'\r\n        }\r\n        //this.title = props.title\r\n        this.G = new PIXI.Graphics();\r\n    }\r\n\r\n    initPIXI = (backgroundColor:number) =>{\r\n        //TODO: on resize reinit application and reassign this.G\r\n        //FIXME: get accurate canvas size from dom\r\n        this.app = new PIXI.Application({\r\n\t\t\twidth: window.innerWidth ,//this.screen.screenWidth,\r\n\t\t\theight: window.innerHeight, // this.screen.screenHeight,\r\n\t\t\tbackgroundColor: backgroundColor,\r\n\t\t\tantialias: true\r\n\t\t});\r\n\t\tthis.renderTarget.appendChild(this.app.view);\r\n\t\tthis.app.start(); //start renderer internal update ticker;\r\n        this.app.stage.addChild(this.G);\r\n    }\r\n\r\n    componentDidMount(){\r\n        console.log(this.renderTarget.getBoundingClientRect())\r\n        this.screen = {\r\n            screenWidth: (window.innerWidth), //this.renderTarget.getBoundingClientRect().width,\r\n            screenHeight: window.innerHeight, //this.renderTarget.getBoundingClientRect().height, \r\n            startX: 0, endX: 15,\r\n            startY: 0, endY: 10\r\n        }\r\n        this.initPIXI(0); //black background\r\n        this.initSim()\r\n    }\r\n\r\n    initSim(){\r\n        if(this.timeoutPtr) clearTimeout(this.timeoutPtr);\r\n        if(this.ball) this.ball.g.clear();\r\n        this.ball = new Particle(\r\n            new Vector2(2,0), // pos (5,0)\r\n            new Vector2(3,7), // 3m/s horizontal 7m/s upward initial velocity\r\n            new Vector2(0,-10) // -10m/s/s downward acceleration due to gravity\r\n        );\r\n        this.app.stage.addChild(this.ball.g)\r\n        this.update();\r\n    }\r\n\r\n    draw = () =>{\r\n        this.ball.draw(this.screen)\r\n    }\r\n\r\n    update = () =>{\r\n        if(this.state.paused) {this.prevUpdateTime = Date.now(); return}\r\n        if(!this.prevUpdateTime) this.prevUpdateTime = Date.now();\r\n        let deltaT = (Date.now() - this.prevUpdateTime)/1000\r\n        /**UPDATE LOGIC */\r\n        this.ball.update(deltaT);\r\n        //constrain ball to window bounds in X\r\n        if(this.ball.pos.x<this.screen.startX || this.ball.pos.x > this.screen.endX){\r\n            this.ball.setAcc(new Vector2(0,0));\r\n            this.ball.setVel(new Vector2(0,0));\r\n        }\r\n        if(this.ball.pos.y<this.screen.startY){\r\n            this.ball.setPos(new Vector2(this.ball.pos.x, this.screen.startY)) // avoid double collision registration\r\n            this.ball.setVel(new Vector2(this.ball.vel.x,-this.ball.vel.y* (1 - Number(this.state.dampingLevel)/10))); // bounce off of floor\r\n        }\r\n\r\n        this.draw();\r\n        this.prevUpdateTime = Date.now();\r\n        this.timeoutPtr = setTimeout(this.update, 16.66); //~60fps\r\n    }\r\n\r\n    handlePress = (e:KeyboardEvent) => {\r\n\r\n    }\r\n\r\n    render() {\r\n        if(this.state.goBack) return <Redirect to = {{pathname:'/'}}/>\r\n        let component = this;\r\n\t\tdocument.addEventListener('keyup', (e) => { this.handlePress(e) });\r\n\t\treturn (\r\n            <div className =\"sim-wrapper\">\r\n                <div className = \"sim-header\">Basic Bouncing Ball</div>\r\n                <div className=\"sim-sidebar\" >\r\n                    <div className = \"back-butt\" onClick={(e)=>this.setState({goBack:true})}>back</div>\r\n                    <div className = \"pause-butt\" onClick = {(e)=>this.setState({paused:!this.state.paused})}>{!this.state.paused?'pause':'unpause'}</div>\r\n                    <div className = \"restart-butt\" onClick = {(e)=>this.initSim()}>restart</div>\r\n                    {/** this is where you place any misc inputs to your sim and bind them to state*/}\r\n                    <div className = \"num-input\">\r\n                        <em>damping level:</em>\r\n                        {/**TODO: make custom input component */}\r\n                        <input className = \"slider\" type=\"range\" min=\"0\" max=\"10\" value={this.state.dampingLevel} onChange={(v)=>this.setState({dampingLevel: v.target.value})}/>\r\n                    </div>\r\n                </div>\r\n                <div className = \"sim-content\" ref={(thisDiv: HTMLDivElement) => { component.renderTarget = thisDiv }}\r\n                        onMouseMove={(e) => {  }}\r\n                    />\r\n                <div className = \"sim-footer\">written by theo cooper</div>\r\n                \r\n            </div>\r\n\t\t);\r\n    }\r\n}\r\n","C:\\Users\\TheoA\\Documents\\Github\\physics-portfolio\\src\\simulation\\OrbitSim.tsx",[],"C:\\Users\\TheoA\\Documents\\Github\\physics-portfolio\\src\\simulation\\utils\\vect.ts",[],"C:\\Users\\TheoA\\Documents\\Github\\physics-portfolio\\src\\simulation\\GenericSim.tsx",[],"C:\\Users\\TheoA\\Documents\\Github\\physics-portfolio\\src\\simulation\\pegboardSim\\pegboardSim.tsx",[],"C:\\Users\\TheoA\\Documents\\Github\\physics-portfolio\\src\\simulation\\pegboardSim\\BallCollider.ts",[],"C:\\Users\\TheoA\\Documents\\Github\\physics-portfolio\\src\\simulation\\pegboardSim\\PegCollider.ts",[],"C:\\Users\\TheoA\\Documents\\Github\\physics-portfolio\\src\\simulation\\IDrawable.ts",[],"C:\\Users\\TheoA\\Documents\\Github\\physics-portfolio\\src\\index.js",[],["85","86"],"C:\\Users\\TheoA\\Documents\\Github\\physics-portfolio\\src\\simulation\\pegboardSim\\Pegboard.ts",[],"C:\\Users\\TheoA\\Documents\\Github\\physics-portfolio\\src\\simulation\\threebodySim\\threeBodySim.tsx",[],"C:\\Users\\TheoA\\Documents\\Github\\physics-portfolio\\src\\simulation\\threebodySim\\GravSystem.ts",[],"C:\\Users\\TheoA\\Documents\\Github\\physics-portfolio\\src\\simulation\\threebodySim\\GravBody.ts",[],{"ruleId":"87","replacedBy":"88"},{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","severity":1,"message":"92","line":2,"column":10,"nodeType":"93","messageId":"94","endLine":2,"endColumn":15},{"ruleId":"91","severity":1,"message":"95","line":3,"column":8,"nodeType":"93","messageId":"94","endLine":3,"endColumn":18},{"ruleId":"87","replacedBy":"88"},{"ruleId":"89","replacedBy":"90"},"no-native-reassign",["96"],"no-negated-in-lhs",["97"],"@typescript-eslint/no-unused-vars","'Route' is defined but never used.","Identifier","unusedVar","'GenericSim' is defined but never used.","no-global-assign","no-unsafe-negation"]