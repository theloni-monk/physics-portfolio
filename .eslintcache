[{"C:\\Users\\TheoA\\Documents\\Github\\physics-portfolio\\src\\serviceWorker.ts":"1","C:\\Users\\TheoA\\Documents\\Github\\physics-portfolio\\src\\App.tsx":"2","C:\\Users\\TheoA\\Documents\\Github\\physics-portfolio\\src\\Home.tsx":"3","C:\\Users\\TheoA\\Documents\\Github\\physics-portfolio\\src\\simulation\\index.ts":"4","C:\\Users\\TheoA\\Documents\\Github\\physics-portfolio\\src\\PreviewCard.tsx":"5","C:\\Users\\TheoA\\Documents\\Github\\physics-portfolio\\src\\simulation\\BlankTestSim.tsx":"6","C:\\Users\\TheoA\\Documents\\Github\\physics-portfolio\\src\\simulation\\BasicParticleSim.tsx":"7","C:\\Users\\TheoA\\Documents\\Github\\physics-portfolio\\src\\simulation\\OrbitSim.tsx":"8","C:\\Users\\TheoA\\Documents\\Github\\physics-portfolio\\src\\simulation\\utils\\vect.ts":"9","C:\\Users\\TheoA\\Documents\\Github\\physics-portfolio\\src\\simulation\\GenericSim.tsx":"10","C:\\Users\\TheoA\\Documents\\Github\\physics-portfolio\\src\\simulation\\pegboardSim\\pegboardSim.tsx":"11","C:\\Users\\TheoA\\Documents\\Github\\physics-portfolio\\src\\simulation\\pegboardSim\\BallCollider.ts":"12","C:\\Users\\TheoA\\Documents\\Github\\physics-portfolio\\src\\simulation\\pegboardSim\\PegCollider.ts":"13","C:\\Users\\TheoA\\Documents\\Github\\physics-portfolio\\src\\simulation\\IDrawable.ts":"14","C:\\Users\\TheoA\\Documents\\Github\\physics-portfolio\\src\\index.js":"15","C:\\Users\\TheoA\\Documents\\Github\\physics-portfolio\\src\\simulation\\pegboardSim\\Pegboard.ts":"16"},{"size":5295,"mtime":499162500000,"results":"17","hashOfConfig":"18"},{"size":725,"mtime":1613341059574,"results":"19","hashOfConfig":"18"},{"size":1330,"mtime":1615055091603,"results":"20","hashOfConfig":"18"},{"size":269,"mtime":1613340894349,"results":"21","hashOfConfig":"18"},{"size":1040,"mtime":1615055022258,"results":"22","hashOfConfig":"18"},{"size":1281,"mtime":1600975843544,"results":"23","hashOfConfig":"18"},{"size":6720,"mtime":1614990713023,"results":"24","hashOfConfig":"18"},{"size":8493,"mtime":1614990731621,"results":"25","hashOfConfig":"18"},{"size":1256,"mtime":1614804752311,"results":"26","hashOfConfig":"18"},{"size":1329,"mtime":1601770668133,"results":"27","hashOfConfig":"18"},{"size":4718,"mtime":1615064406995,"results":"28","hashOfConfig":"18"},{"size":2182,"mtime":1613342994547,"results":"29","hashOfConfig":"18"},{"size":1606,"mtime":1615065077929,"results":"30","hashOfConfig":"18"},{"size":793,"mtime":1609821983284,"results":"31","hashOfConfig":"18"},{"size":609,"mtime":1614989460931,"results":"32","hashOfConfig":"18"},{"size":6057,"mtime":1615065305260,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"eanwrs",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"36"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"36"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":null},"C:\\Users\\TheoA\\Documents\\Github\\physics-portfolio\\src\\serviceWorker.ts",[],["70","71"],"C:\\Users\\TheoA\\Documents\\Github\\physics-portfolio\\src\\App.tsx",[],"C:\\Users\\TheoA\\Documents\\Github\\physics-portfolio\\src\\Home.tsx",[],"C:\\Users\\TheoA\\Documents\\Github\\physics-portfolio\\src\\simulation\\index.ts",[],"C:\\Users\\TheoA\\Documents\\Github\\physics-portfolio\\src\\PreviewCard.tsx",["72"],"import React, { Component } from 'react'\r\nimport { Route, Redirect } from \"react-router-dom\";\r\n\r\n\r\ninterface iprops{\r\n    link: string,\r\n    preview_img: any,\r\n    title: string,\r\n    description: string\r\n}\r\ninterface istate{\r\n    isClicked:boolean,\r\n    isHovered:boolean\r\n}\r\n\r\nexport default class PreviewCard extends Component<iprops,istate> {\r\n    constructor(props:iprops){\r\n        super(props);\r\n        this.state = {isClicked:false, isHovered:false};\r\n    }\r\n    render() {\r\n        //fuxk it write the hover css later stop being a dumbass\r\n        if(this.state.isClicked) return <Redirect to = {{pathname: this.props.link}} />\r\n        //TODO: add preview\r\n        return (\r\n            <div className='rounded-lg bg-purple-800 p-4 w-36 text-white m-3' onClick={(e) => this.setState({isClicked:true})}>\r\n                <div className = 'hover:underline'>{this.props.title}</div>\r\n                <div className= 'text-center text-blue-400'>{this.props.description}</div>\r\n            \r\n            </div>\r\n        );\r\n    }\r\n}\r\n","C:\\Users\\TheoA\\Documents\\Github\\physics-portfolio\\src\\simulation\\BlankTestSim.tsx",[],"C:\\Users\\TheoA\\Documents\\Github\\physics-portfolio\\src\\simulation\\BasicParticleSim.tsx",["73"],"import React,{Component} from 'react'\r\nimport * as PIXI from 'pixi.js'\r\nimport GenericSim from './GenericSim'\r\n\r\nimport Drawable, {screenBounds} from './IDrawable'\r\nimport DynamicBody from './IDynamicBody'\r\nimport Vector2 from './utils/vect'\r\n\r\nimport { Redirect } from 'react-router-dom'\r\ninterface iparticle extends DynamicBody,Drawable{};\r\n\r\nclass Particle implements iparticle{\r\n    pos:Vector2 \r\n    vel:Vector2 \r\n    acc:Vector2\r\n    g:PIXI.Graphics\r\n    constructor(p:Vector2,v:Vector2,a:Vector2){\r\n        this.pos = p;\r\n        this.vel = v;\r\n        this.acc = a;\r\n        this.g = new PIXI.Graphics();\r\n    }\r\n    setPos = (p:Vector2) => this.pos = p;\r\n    setVel = (v:Vector2) => this.vel = v;\r\n    setAcc = (a:Vector2) => this.acc = a;\r\n\r\n    /**@param t - time difference between update calls ; must be in seconds _not ms_ */\r\n    update(t:number){\r\n        this.pos = this.pos.add(this.vel.multScalar(t));\r\n        this.vel = this.vel.add(this.acc.multScalar(t));\r\n    }\r\n\r\n    posToPx(sb:screenBounds){\r\n        let scaleh = (sb.endY - sb.startY) / sb.screenHeight;\r\n        //what one px corresponds to\r\n        let scalew = (sb.endX - sb.startX) / sb.screenWidth;\r\n        \r\n        let px = ((this.pos.x - sb.startX) / scalew);\r\n        let py = ((-1 * (this.pos.y - sb.endY)) / scaleh);\r\n        return new Vector2(px,py);\r\n    }\r\n\r\n    draw(sb:screenBounds){\r\n        this.g.clear();\r\n        let pxPos:Vector2 = this.posToPx(sb);\r\n        // Circle\r\n        this.g.lineStyle(0); //lineStyle to zero so the circle doesn't have an outline\r\n        this.g.beginFill(0xDE3249, 1);\r\n        this.g.drawCircle(pxPos.x, pxPos.y, 20); //20px size is totally arbitrary but will be fine for now\r\n        this.g.endFill();\r\n    }\r\n    \r\n}\r\n\r\ninterface iprops{\r\n    title: string\r\n}\r\ninterface istate{\r\n    goBack:boolean,\r\n    paused:boolean,\r\n    dampingLevel: string\r\n}\r\nexport default class BasicParticleSim extends Component<iprops,istate> {\r\n    protected renderTarget: HTMLDivElement\r\n    protected G: PIXI.Graphics\r\n    protected app: PIXI.Application\r\n    protected prevUpdateTime:number\r\n    protected screen:screenBounds \r\n    protected timeoutPtr: any //weird js pointer type\r\n\r\n    readonly fps:number = 60;\r\n\r\n    protected title: string\r\n\r\n    /**UNIQUE SIM VARIABLES */\r\n    ball:Particle\r\n\r\n    constructor(props:iprops){\r\n        super(props);\r\n        this.state = {\r\n            goBack:false,\r\n            paused:false,\r\n            dampingLevel: '0.5'\r\n        }\r\n        //this.title = props.title\r\n        this.G = new PIXI.Graphics();\r\n    }\r\n\r\n    initPIXI = (backgroundColor:number) =>{\r\n        //TODO: on resize reinit application and reassign this.G\r\n        //FIXME: get accurate canvas size from dom\r\n        this.app = new PIXI.Application({\r\n\t\t\twidth: window.innerWidth ,//this.screen.screenWidth,\r\n\t\t\theight: window.innerHeight, // this.screen.screenHeight,\r\n\t\t\tbackgroundColor: backgroundColor,\r\n\t\t\tantialias: true\r\n\t\t});\r\n\t\tthis.renderTarget.appendChild(this.app.view);\r\n\t\tthis.app.start(); //start renderer internal update ticker;\r\n        this.app.stage.addChild(this.G);\r\n    }\r\n\r\n    componentDidMount(){\r\n        console.log(this.renderTarget.getBoundingClientRect())\r\n        this.screen = {\r\n            screenWidth: (window.innerWidth), //this.renderTarget.getBoundingClientRect().width,\r\n            screenHeight: window.innerHeight, //this.renderTarget.getBoundingClientRect().height, \r\n            startX: 0, endX: 15,\r\n            startY: 0, endY: 10\r\n        }\r\n        this.initPIXI(0); //black background\r\n        this.initSim()\r\n    }\r\n\r\n    initSim(){\r\n        if(this.timeoutPtr) clearTimeout(this.timeoutPtr);\r\n        if(this.ball) this.ball.g.clear();\r\n        this.ball = new Particle(\r\n            new Vector2(2,0), // pos (5,0)\r\n            new Vector2(3,7), // 3m/s horizontal 7m/s upward initial velocity\r\n            new Vector2(0,-10) // -10m/s/s downward acceleration due to gravity\r\n        );\r\n        this.app.stage.addChild(this.ball.g)\r\n        this.update();\r\n    }\r\n\r\n    draw = () =>{\r\n        this.ball.draw(this.screen)\r\n    }\r\n\r\n    update = () =>{\r\n        if(this.state.paused) {this.prevUpdateTime = Date.now(); return}\r\n        if(!this.prevUpdateTime) this.prevUpdateTime = Date.now();\r\n        let deltaT = (Date.now() - this.prevUpdateTime)/1000\r\n        /**UPDATE LOGIC */\r\n        this.ball.update(deltaT);\r\n        //constrain ball to window bounds in X\r\n        if(this.ball.pos.x<this.screen.startX || this.ball.pos.x > this.screen.endX){\r\n            this.ball.setAcc(new Vector2(0,0));\r\n            this.ball.setVel(new Vector2(0,0));\r\n        }\r\n        if(this.ball.pos.y<this.screen.startY){\r\n            this.ball.setPos(new Vector2(this.ball.pos.x, this.screen.startY)) // avoid double collision registration\r\n            this.ball.setVel(new Vector2(this.ball.vel.x,-this.ball.vel.y* (1 - Number(this.state.dampingLevel)/10))); // bounce off of floor\r\n        }\r\n\r\n        this.draw();\r\n        this.prevUpdateTime = Date.now();\r\n        this.timeoutPtr = setTimeout(this.update, 16.66); //~60fps\r\n    }\r\n\r\n    handlePress = (e:KeyboardEvent) => {\r\n\r\n    }\r\n\r\n    render() {\r\n        if(this.state.goBack) return <Redirect to = {{pathname:'/'}}/>\r\n        let component = this;\r\n\t\tdocument.addEventListener('keyup', (e) => { this.handlePress(e) });\r\n\t\treturn (\r\n            <div className =\"sim-wrapper\">\r\n                <div className = \"sim-header\">Basic Bouncing Ball</div>\r\n                <div className=\"sim-sidebar\" >\r\n                    <div className = \"back-butt\" onClick={(e)=>this.setState({goBack:true})}>back</div>\r\n                    <div className = \"pause-butt\" onClick = {(e)=>this.setState({paused:!this.state.paused})}>{!this.state.paused?'pause':'unpause'}</div>\r\n                    <div className = \"restart-butt\" onClick = {(e)=>this.initSim()}>restart</div>\r\n                    {/** this is where you place any misc inputs to your sim and bind them to state*/}\r\n                    <div className = \"num-input\">\r\n                        <em>damping level:</em>\r\n                        {/**TODO: make custom input component */}\r\n                        <input className = \"slider\" type=\"range\" min=\"0\" max=\"10\" value={this.state.dampingLevel} onChange={(v)=>this.setState({dampingLevel: v.target.value})}/>\r\n                    </div>\r\n                </div>\r\n                <div className = \"sim-content\" ref={(thisDiv: HTMLDivElement) => { component.renderTarget = thisDiv }}\r\n                        onMouseMove={(e) => {  }}\r\n                    />\r\n                <div className = \"sim-footer\">written by theo cooper</div>\r\n                \r\n            </div>\r\n\t\t);\r\n    }\r\n}\r\n","C:\\Users\\TheoA\\Documents\\Github\\physics-portfolio\\src\\simulation\\OrbitSim.tsx",[],"C:\\Users\\TheoA\\Documents\\Github\\physics-portfolio\\src\\simulation\\utils\\vect.ts",[],"C:\\Users\\TheoA\\Documents\\Github\\physics-portfolio\\src\\simulation\\GenericSim.tsx",[],"C:\\Users\\TheoA\\Documents\\Github\\physics-portfolio\\src\\simulation\\pegboardSim\\pegboardSim.tsx",[],"C:\\Users\\TheoA\\Documents\\Github\\physics-portfolio\\src\\simulation\\pegboardSim\\BallCollider.ts",[],"C:\\Users\\TheoA\\Documents\\Github\\physics-portfolio\\src\\simulation\\pegboardSim\\PegCollider.ts",[],"C:\\Users\\TheoA\\Documents\\Github\\physics-portfolio\\src\\simulation\\IDrawable.ts",[],"C:\\Users\\TheoA\\Documents\\Github\\physics-portfolio\\src\\index.js",[],["74","75"],"C:\\Users\\TheoA\\Documents\\Github\\physics-portfolio\\src\\simulation\\pegboardSim\\Pegboard.ts",["76","77"],{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","severity":1,"message":"83","line":2,"column":10,"nodeType":"84","messageId":"85","endLine":2,"endColumn":15},{"ruleId":"82","severity":1,"message":"86","line":3,"column":8,"nodeType":"84","messageId":"85","endLine":3,"endColumn":18},{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","replacedBy":"81"},{"ruleId":"87","severity":1,"message":"88","line":31,"column":21,"nodeType":"89","messageId":"90","endLine":31,"endColumn":32,"fix":"91"},{"ruleId":"87","severity":1,"message":"88","line":32,"column":22,"nodeType":"89","messageId":"90","endLine":32,"endColumn":33,"fix":"92"},"no-native-reassign",["93"],"no-negated-in-lhs",["94"],"@typescript-eslint/no-unused-vars","'Route' is defined but never used.","Identifier","unusedVar","'GenericSim' is defined but never used.","@typescript-eslint/no-array-constructor","The array literal notation [] is preferable.","NewExpression","useLiteral",{"range":"95","text":"96"},{"range":"97","text":"96"},"no-global-assign","no-unsafe-negation",[814,825],"[]",[849,860]]