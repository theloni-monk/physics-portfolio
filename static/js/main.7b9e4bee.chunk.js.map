{"version":3,"sources":["simulation/BlankTestSim.tsx","simulation/GenericSim.tsx","simulation/utils/vect.ts","simulation/BasicParticleSim.tsx","simulation/OrbitSim.tsx","simulation/IDrawable.ts","simulation/pegboardSim/BallCollider.ts","simulation/pegboardSim/PegCollider.ts","simulation/pegboardSim/Pegboard.ts","simulation/pegboardSim/pegboardSim.tsx","simulation/threebodySim/GravBody.ts","simulation/threebodySim/GravSystem.ts","simulation/threebodySim/threeBodySim.tsx","PreviewCard.tsx","Home.tsx","App.tsx","serviceWorker.ts","index.js"],"names":["BlankTestSim","props","title","draw","G","lineStyle","beginFill","drawCircle","endFill","update","setTimeout","handlePress","e","this","screen","screenHeight","window","innerHeight","screenWidth","innerWidth","startX","endX","startY","endY","initPIXI","component","document","addEventListener","className","ref","thisDiv","renderTarget","onMouseMove","rest","app","prevUpdateTime","fps","backgroundColor","PIXI","width","height","antialias","appendChild","view","start","stage","addChild","Date","now","Component","Vector2","x","y","copy","toString","length","Math","sqrt","isZero","radians","atan2","congugate","norm","multScalar","inv","add","other","sub","s","dot","fromPolar","r","theta","cos","sin","Particle","p","v","a","pos","vel","acc","g","setPos","setVel","setAcc","t","sb","scaleh","scalew","px","py","clear","pxPos","posToPx","BasicParticleSim","timeoutPtr","ball","state","paused","deltaT","Number","dampingLevel","goBack","console","log","getBoundingClientRect","initSim","clearTimeout","to","pathname","onClick","setState","type","min","max","value","onChange","target","COORDSPACE","PLANET_RAD","BODY_RAD","GravBody","mass","drawEllipse","F","rVel","String","BallColliderObject","rad","radius","atRest","momentum","PegColliderObject","isOverlapping","MIN_VEL","BALL_START_POS","PEG_LOCS","Pegboard","xrange","yrange","pegs","balls","allAtRest","forEach","peg","step","ballsAtRest","currBallLen","i","doBPCollision","j","oball","doBBCollision","checkEdge","spawnBall","push","xlen","abs","ylen","loc","distanceVect","distanceVectMag","minDistance","correctionVector","sine","cosine","bTemp","vTemp","vFinal","bFinal","velNoiseVect","random","b1","b2","updateTicker","pegboardSim","board","started","handleKeyDown","code","preventDefault","debounced","handleKeyUp","autoStart","sw","getElementById","clientWidth","sh","clientHeight","ratio","id","GravSystem","bodies","gravInteract","spawnBody","initPos","initVel","body","threeBodySim","gravSys","handleClick","onMouseDown","PreviewCard","isClicked","link","style","description","Home","gridTemplateColumns","gridGap","App","useEffect","exact","path","SIMS","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7b9e4bee.chunk.js","sourcesContent":["import React from 'react'\r\nimport GenericSim from './GenericSim'\r\n\r\ninterface iprops{\r\n    title: string\r\n}\r\nexport class BlankTestSim extends GenericSim{\r\n    //WRITME: basic ball collision sim\r\n    constructor(props:iprops){\r\n        super(props.title);\r\n    }\r\n    componentDidMount(){\r\n        this.screen = {\r\n            screenHeight:window.innerHeight, \r\n            screenWidth:window.innerWidth,\r\n            startX: 0, endX: 15,\r\n            startY: 0, endY: 10\r\n        }\r\n        this.initPIXI(0);\r\n        this.update()\r\n    }\r\n\r\n\r\n    draw = () =>{\r\n        // Circle\r\n        this.G.lineStyle(0); // draw a circle, set the lineStyle to zero so the circle doesn't have an outline\r\n        this.G.beginFill(0xDE3249, 1);\r\n        this.G.drawCircle(100, 250, 50);\r\n        this.G.endFill();\r\n    }\r\n\r\n    update = () =>{\r\n        this.draw();\r\n\r\n        setTimeout(this.update, 16.7);\r\n    }\r\n\r\n    handlePress = (e:KeyboardEvent) => {\r\n\r\n    }\r\n\r\n    render() {\r\n        let component = this;\r\n\t\tdocument.addEventListener('keyup', (e) => { this.handlePress(e) });\r\n\t\treturn (\r\n\t\t\t<div className=\"GameFrameWrapper\">\r\n\t\t\t\t<div ref={(thisDiv: HTMLDivElement) => { component.renderTarget = thisDiv }}\r\n\t\t\t\t\tonMouseMove={(e) => {  }}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t); //\r\n    }\r\n}\r\n","import { Component } from 'react'\r\nimport * as PIXI from 'pixi.js'\r\nimport {screenBounds} from './IDrawable'\r\n\r\nexport default abstract class GenericSim extends Component {\r\n    protected renderTarget: HTMLDivElement\r\n    protected G: PIXI.Graphics\r\n    protected app: PIXI.Application\r\n    protected prevUpdateTime:number\r\n    protected screen:screenBounds \r\n\r\n    readonly fps:number = 60;\r\n    \r\n    protected title: string\r\n\r\n    constructor(title:string, ...rest:any[]){\r\n        super(rest);\r\n        this.title = title\r\n        this.G = new PIXI.Graphics();\r\n    }\r\n\r\n    initPIXI = (backgroundColor:number) =>{\r\n        //TODO: on resize reinit application and reassign this.G\r\n        this.app = new PIXI.Application({\r\n\t\t\twidth: this.screen.screenWidth,\r\n\t\t\theight: this.screen.screenHeight,\r\n\t\t\tbackgroundColor: backgroundColor,\r\n\t\t\tantialias: true\r\n\t\t});\r\n\t\tthis.renderTarget.appendChild(this.app.view);\r\n\t\tthis.app.start(); //start renderer internal update ticker;\r\n        this.app.stage.addChild(this.G);\r\n        this.prevUpdateTime = Date.now();\r\n    }\r\n\r\n    abstract handlePress(e:KeyboardEvent):void\r\n\r\n    /** @note must create a screenBounds object and call initPIXI */\r\n    abstract componentDidMount():void \r\n\r\n    abstract draw():void\r\n\r\n    abstract update():void\r\n    abstract render():JSX.Element\r\n}\r\n","/**@class Immutable Vector class, all methods return either properties or new vectors */\r\nexport default class Vector2 {\r\n    readonly x: number;\r\n    readonly y: number;\r\n\r\n    constructor(x: number, y: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    static fromPolar = (r: number, theta: number): Vector2 => new Vector2(r * Math.cos(theta), r * Math.sin(theta))\r\n\r\n    copy = ():Vector2 => new Vector2(this.x, this.y)\r\n\r\n    toString = ():string => '<x: ' + this.x.toString() + ', y: ' + this.y.toString()+'>'\r\n\r\n    length = (): number => Math.sqrt(this.x * this.x + (this.y * this.y))\r\n\r\n    isZero = (): boolean => this.length()<0.00001\r\n\r\n    radians = (): number => Math.atan2(this.y, this.x)\r\n\r\n    congugate = (): Vector2 => new Vector2(this.x, -this.y)\r\n\r\n    norm = (): Vector2 => this.multScalar(1/this.length())\r\n\r\n\r\n    inv = (): Vector2 => new Vector2(-this.x, -this.y)\r\n\r\n\r\n    add = (other: Vector2): Vector2 => new Vector2(this.x + other.x, this.y + other.y);\r\n\r\n\r\n    sub = (other: Vector2): Vector2 => new Vector2(this.x - other.x, this.y - other.y);\r\n\r\n\r\n    multScalar = (s: number): Vector2 => new Vector2(this.x * s, this.y * s)\r\n\r\n\r\n    dot = (other: Vector2): number => this.x * other.x + (this.y * other.y)\r\n\r\n}","import React,{Component} from 'react'\r\nimport * as PIXI from 'pixi.js'\r\nimport GenericSim from './GenericSim'\r\n\r\nimport Drawable, {screenBounds} from './IDrawable'\r\nimport DynamicBody from './IDynamicBody'\r\nimport Vector2 from './utils/vect'\r\n\r\nimport { Redirect } from 'react-router-dom'\r\ninterface iparticle extends DynamicBody,Drawable{};\r\n\r\nclass Particle implements iparticle{\r\n    pos:Vector2 \r\n    vel:Vector2 \r\n    acc:Vector2\r\n    g:PIXI.Graphics\r\n    constructor(p:Vector2,v:Vector2,a:Vector2){\r\n        this.pos = p;\r\n        this.vel = v;\r\n        this.acc = a;\r\n        this.g = new PIXI.Graphics();\r\n    }\r\n    setPos = (p:Vector2) => this.pos = p;\r\n    setVel = (v:Vector2) => this.vel = v;\r\n    setAcc = (a:Vector2) => this.acc = a;\r\n\r\n    /**@param t - time difference between update calls ; must be in seconds _not ms_ */\r\n    update(t:number){\r\n        this.pos = this.pos.add(this.vel.multScalar(t));\r\n        this.vel = this.vel.add(this.acc.multScalar(t));\r\n    }\r\n\r\n    posToPx(sb:screenBounds){\r\n        let scaleh = (sb.endY - sb.startY) / sb.screenHeight;\r\n        //what one px corresponds to\r\n        let scalew = (sb.endX - sb.startX) / sb.screenWidth;\r\n        \r\n        let px = ((this.pos.x - sb.startX) / scalew);\r\n        let py = ((-1 * (this.pos.y - sb.endY)) / scaleh);\r\n        return new Vector2(px,py);\r\n    }\r\n\r\n    draw(sb:screenBounds){\r\n        this.g.clear();\r\n        let pxPos:Vector2 = this.posToPx(sb);\r\n        // Circle\r\n        this.g.lineStyle(0); //lineStyle to zero so the circle doesn't have an outline\r\n        this.g.beginFill(0xDE3249, 1);\r\n        this.g.drawCircle(pxPos.x, pxPos.y, 20); //20px size is totally arbitrary but will be fine for now\r\n        this.g.endFill();\r\n    }\r\n    \r\n}\r\n\r\ninterface iprops{\r\n    title: string\r\n}\r\ninterface istate{\r\n    goBack:boolean,\r\n    paused:boolean,\r\n    dampingLevel: string\r\n}\r\nexport default class BasicParticleSim extends Component<iprops,istate> {\r\n    protected renderTarget: HTMLDivElement\r\n    protected G: PIXI.Graphics\r\n    protected app: PIXI.Application\r\n    protected prevUpdateTime:number\r\n    protected screen:screenBounds \r\n    protected timeoutPtr: any //weird js pointer type\r\n\r\n    readonly fps:number = 60;\r\n\r\n    protected title: string\r\n\r\n    /**UNIQUE SIM VARIABLES */\r\n    ball:Particle\r\n\r\n    constructor(props:iprops){\r\n        super(props);\r\n        this.state = {\r\n            goBack:false,\r\n            paused:false,\r\n            dampingLevel: '0.5'\r\n        }\r\n        //this.title = props.title\r\n        this.G = new PIXI.Graphics();\r\n    }\r\n\r\n    initPIXI = (backgroundColor:number) =>{\r\n        //TODO: on resize reinit application and reassign this.G\r\n        //FIXME: get accurate canvas size from dom\r\n        this.app = new PIXI.Application({\r\n\t\t\twidth: window.innerWidth ,//this.screen.screenWidth,\r\n\t\t\theight: window.innerHeight, // this.screen.screenHeight,\r\n\t\t\tbackgroundColor: backgroundColor,\r\n\t\t\tantialias: true\r\n\t\t});\r\n\t\tthis.renderTarget.appendChild(this.app.view);\r\n\t\tthis.app.start(); //start renderer internal update ticker;\r\n        this.app.stage.addChild(this.G);\r\n    }\r\n\r\n    componentDidMount(){\r\n        console.log(this.renderTarget.getBoundingClientRect())\r\n        this.screen = {\r\n            screenWidth: (window.innerWidth), //this.renderTarget.getBoundingClientRect().width,\r\n            screenHeight: window.innerHeight, //this.renderTarget.getBoundingClientRect().height, \r\n            startX: 0, endX: 15,\r\n            startY: 0, endY: 10\r\n        }\r\n        this.initPIXI(0); //black background\r\n        this.initSim()\r\n    }\r\n\r\n    initSim(){\r\n        if(this.timeoutPtr) clearTimeout(this.timeoutPtr);\r\n        if(this.ball) this.ball.g.clear();\r\n        this.ball = new Particle(\r\n            new Vector2(2,0), // pos (5,0)\r\n            new Vector2(3,7), // 3m/s horizontal 7m/s upward initial velocity\r\n            new Vector2(0,-10) // -10m/s/s downward acceleration due to gravity\r\n        );\r\n        this.app.stage.addChild(this.ball.g)\r\n        this.update();\r\n    }\r\n\r\n    draw = () =>{\r\n        this.ball.draw(this.screen)\r\n    }\r\n\r\n    update = () =>{\r\n        if(this.state.paused) {this.prevUpdateTime = Date.now(); return}\r\n        if(!this.prevUpdateTime) this.prevUpdateTime = Date.now();\r\n        let deltaT = (Date.now() - this.prevUpdateTime)/1000\r\n        /**UPDATE LOGIC */\r\n        this.ball.update(deltaT);\r\n        //constrain ball to window bounds in X\r\n        if(this.ball.pos.x<this.screen.startX || this.ball.pos.x > this.screen.endX){\r\n            this.ball.setAcc(new Vector2(0,0));\r\n            this.ball.setVel(new Vector2(0,0));\r\n        }\r\n        if(this.ball.pos.y<this.screen.startY){\r\n            this.ball.setPos(new Vector2(this.ball.pos.x, this.screen.startY)) // avoid double collision registration\r\n            this.ball.setVel(new Vector2(this.ball.vel.x,-this.ball.vel.y* (1 - Number(this.state.dampingLevel)/10))); // bounce off of floor\r\n        }\r\n\r\n        this.draw();\r\n        this.prevUpdateTime = Date.now();\r\n        this.timeoutPtr = setTimeout(this.update, 16.66); //~60fps\r\n    }\r\n\r\n    handlePress = (e:KeyboardEvent) => {\r\n\r\n    }\r\n\r\n    render() {\r\n        if(this.state.goBack) return <Redirect to = {{pathname:'/'}}/>\r\n        let component = this;\r\n\t\tdocument.addEventListener('keyup', (e) => { this.handlePress(e) });\r\n\t\treturn (\r\n            <div className =\"sim-wrapper\">\r\n                <div className = \"sim-header\">Basic Bouncing Ball</div>\r\n                <div className=\"sim-sidebar\" >\r\n                    <div className = \"back-butt\" onClick={(e)=>this.setState({goBack:true})}>back</div>\r\n                    <div className = \"pause-butt\" onClick = {(e)=>this.setState({paused:!this.state.paused})}>{!this.state.paused?'pause':'unpause'}</div>\r\n                    <div className = \"restart-butt\" onClick = {(e)=>this.initSim()}>restart</div>\r\n                    {/** this is where you place any misc inputs to your sim and bind them to state*/}\r\n                    <div className = \"num-input\">\r\n                        <em>damping level:</em>\r\n                        {/**TODO: make custom input component */}\r\n                        <input className = \"slider\" type=\"range\" min=\"0\" max=\"10\" value={this.state.dampingLevel} onChange={(v)=>this.setState({dampingLevel: v.target.value})}/>\r\n                    </div>\r\n                </div>\r\n                <div className = \"sim-content\" ref={(thisDiv: HTMLDivElement) => { component.renderTarget = thisDiv }}\r\n                        onMouseMove={(e) => {  }}\r\n                    />\r\n                <div className = \"sim-footer\">written by theo cooper</div>\r\n                \r\n            </div>\r\n\t\t);\r\n    }\r\n}\r\n","import React,{Component} from 'react'\r\nimport * as PIXI from 'pixi.js'\r\nimport Drawable, {screenBounds} from './IDrawable'\r\nimport DynamicBody from './IDynamicBody'\r\nimport Vector2 from './utils/vect'\r\n\r\nimport { Redirect } from 'react-router-dom'\r\n/**SIM CONSTANTS */\r\nconst COORDSPACE = [-15, 15, -10, 10] // km\r\n//what one px corresponds to\r\nconst scalew = (width:number): number => (COORDSPACE[1] - COORDSPACE[0]) / width;\r\nconst scaleh = (height:number): number => (COORDSPACE[3] - COORDSPACE[2]) / height;\r\n\r\n\r\nconst PLANET_RAD = 3.1855 //km\r\nconst BODY_RAD = 0.5 //km(idk)\r\nconst PLANET_MASS = 6000000000000 //kg\r\nconst ESCAPE_VEL =  3.1 //km/s\r\nconst GRAV_CONST = 0.0000000000067\r\n\r\n/**UNIQUE ACTOR */\r\ninterface igrav extends DynamicBody, Drawable{}\r\nclass GravBody implements igrav{\r\n    pos:Vector2 \r\n    vel:Vector2 \r\n    acc:Vector2\r\n\r\n    mass: number\r\n\r\n    g:PIXI.Graphics\r\n    constructor(p:Vector2,v:Vector2,a:Vector2, mass:number){\r\n        this.pos = p;\r\n        this.vel = v;\r\n        this.acc = a;\r\n\r\n        this.mass = mass;\r\n\r\n        this.g = new PIXI.Graphics();\r\n    }\r\n    setPos = (p:Vector2) => this.pos = p;\r\n    setVel = (v:Vector2) => this.vel = v;\r\n    setAcc = (a:Vector2) => this.acc = a;\r\n\r\n    /**@param t - time difference between update calls ; must be in seconds _not ms_ */\r\n    update(t:number){\r\n        this.pos = this.pos.add(this.vel.multScalar(t)); \r\n        this.vel = this.vel.add(this.acc.multScalar(t));\r\n    }\r\n\r\n    posToPx(sb:screenBounds){\r\n        let px = ((this.pos.x - sb.startX) / scalew(sb.screenWidth));\r\n        let py = ((-1 * (this.pos.y - sb.endY)) / scaleh(sb.screenHeight));\r\n        return new Vector2(px,py);\r\n    }\r\n\r\n    draw(sb:screenBounds){\r\n        this.g.clear();\r\n        let pxPos:Vector2 = this.posToPx(sb);\r\n        // Circle\r\n        this.g.lineStyle(0); //lineStyle to zero so the circle doesn't have an outline\r\n        this.g.beginFill(0x838B8B, 1);\r\n        this.g.drawEllipse(pxPos.x, pxPos.y, BODY_RAD / scalew(sb.screenWidth), BODY_RAD / scaleh(sb.screenHeight)); //20px size is totally arbitrary but will be fine for now\r\n        this.g.endFill();\r\n    }\r\n}\r\n\r\n/**LAYOUT */\r\ninterface iprops{\r\n    title: string\r\n}\r\ninterface istate{\r\n    goBack:boolean,\r\n    paused:boolean,\r\n    rVel: string\r\n}\r\nexport default class BasicParticleSim extends Component<iprops,istate> {\r\n    protected renderTarget: HTMLDivElement\r\n    protected G: PIXI.Graphics\r\n    protected app: PIXI.Application\r\n    protected prevUpdateTime:number\r\n    protected screen:screenBounds \r\n    protected timeoutPtr: any //weird js pointer type\r\n\r\n    readonly fps:number = 60;\r\n\r\n    protected title: string\r\n\r\n    /**UNIQUE SIM VARIABLES */\r\n    ball:GravBody\r\n\r\n    constructor(props:iprops){\r\n        super(props);\r\n        this.state = {\r\n            goBack:false,\r\n            paused:false,\r\n            rVel: String(ESCAPE_VEL)\r\n        }\r\n        //this.title = props.title\r\n        this.G = new PIXI.Graphics();\r\n    }\r\n\r\n    initPIXI = (backgroundColor:number) =>{\r\n        //TODO: on resize reinit application and reassign this.G\r\n        //FIXME: get accurate canvas size from dom\r\n        this.app = new PIXI.Application({\r\n\t\t\twidth: window.innerWidth ,//this.screen.screenWidth,\r\n\t\t\theight: window.innerHeight, // this.screen.screenHeight,\r\n\t\t\tbackgroundColor: backgroundColor,\r\n\t\t\tantialias: true\r\n\t\t});\r\n\t\tthis.renderTarget.appendChild(this.app.view);\r\n\t\tthis.app.start(); //start renderer internal update ticker;\r\n        this.app.stage.addChild(this.G);\r\n    }\r\n\r\n    componentDidMount(){\r\n        console.log(this.renderTarget.getBoundingClientRect())\r\n        this.screen = {\r\n            screenWidth: (window.innerWidth), //this.renderTarget.getBoundingClientRect().width,\r\n            screenHeight: window.innerHeight, //this.renderTarget.getBoundingClientRect().height, \r\n            startX: COORDSPACE[0], endX: COORDSPACE[1],\r\n            startY: COORDSPACE[2], endY: COORDSPACE[3]\r\n        }\r\n        console.log(scalew(this.screen.screenWidth), scaleh(this.screen.screenHeight))\r\n        this.initPIXI(0x0F0F0F); //white background\r\n        this.initSim()\r\n    }\r\n\r\n    initSim(){\r\n        console.log('initsim called')\r\n        if(this.timeoutPtr) clearTimeout(this.timeoutPtr);\r\n        if(this.ball) this.ball.g.clear();\r\n        this.ball = new GravBody(\r\n            new Vector2(0,PLANET_RAD+BODY_RAD), // pos (5,0)\r\n            new Vector2(Number(this.state.rVel), 0), // horizontal\r\n            new Vector2(0,0), // -10m/s/s downward acceleration due to gravity\r\n            5\r\n        );\r\n        this.app.stage.addChild(this.G);\r\n        this.app.stage.addChild(this.ball.g)\r\n        this.update();\r\n    }\r\n\r\n    draw = () =>{\r\n        //draw planet\r\n        this.G.clear();\r\n        this.G.lineStyle(0); //lineStyle to zero so the circle doesn't have an outline\r\n        this.G.beginFill(0x50A6C2, 1);\r\n        this.G.drawEllipse(this.screen.screenWidth/2, this.screen.screenHeight/2, PLANET_RAD / scalew(this.screen.screenWidth), PLANET_RAD / scaleh(this.screen.screenHeight));\r\n        this.G.endFill();\r\n        this.ball.draw(this.screen);\r\n    }\r\n\r\n    update = () =>{\r\n        if(this.state.paused) {\r\n            this.prevUpdateTime = Date.now(); \r\n            this.timeoutPtr = setTimeout(this.update, 16.66); //~60fps\r\n            return;\r\n        }\r\n        if(!this.prevUpdateTime) this.prevUpdateTime = Date.now();\r\n        let deltaT = (Date.now() - this.prevUpdateTime)/1000;\r\n        \r\n\r\n        /**UPDATE LOGIC */\r\n        let r:Vector2 = this.ball.pos; //displacement vector\r\n        // resultent force vector\r\n        let F:Vector2 = r.norm().multScalar( -GRAV_CONST * PLANET_MASS * this.ball.mass / (r.length() ** 2) ); \r\n        \r\n        //ACC from force vector\r\n        //console.log(`${A}`)\r\n        this.ball.setAcc(F.multScalar(1/this.ball.mass));\r\n       \r\n        \r\n        \r\n        //constrict ball to window\r\n        if(this.ball.pos.x<this.screen.startX || this.ball.pos.x > this.screen.endX || this.ball.pos.y<this.screen.startY|| this.ball.pos.y>this.screen.endY){\r\n            //console.log('ball constricted to window')\r\n            this.ball.setAcc(new Vector2(0,0));\r\n            this.ball.setVel(new Vector2(0,0));\r\n        }\r\n        //stop on coll with planet\r\n        if(r.length() < PLANET_RAD + BODY_RAD){\r\n            //console.log('ball stopped on collision with planet')\r\n            this.ball.setAcc(new Vector2(0,0));\r\n            this.ball.setVel(new Vector2(0,0));\r\n        }\r\n\r\n        //update vel, pos\r\n        this.ball.update(deltaT);\r\n        this.draw();\r\n        this.prevUpdateTime = Date.now();\r\n        this.timeoutPtr = setTimeout(this.update, 16.66); //~60fps\r\n        return;\r\n    }\r\n\r\n    handlePress = (e:KeyboardEvent) => {\r\n\r\n    }\r\n \r\n    render() {\r\n        if(this.state.goBack) return <Redirect to = {{pathname:'/'}}/>\r\n        let component = this;\r\n\t\tdocument.addEventListener('keyup', (e) => { this.handlePress(e) });\r\n\t\treturn (\r\n            <div className =\"sim-wrapper\">\r\n                <div className = \"sim-header\">Orbit Simulation</div>\r\n                <div className=\"sim-sidebar\" >\r\n                    <div className = \"back-butt\" onClick={(e)=>this.setState({goBack:true})}>back</div>\r\n                    <div className = \"pause-butt\" onClick = {(e)=>this.setState({paused:!this.state.paused})}>{!this.state.paused?'pause':'unpause'}</div>\r\n                    <div className = \"restart-butt\" onClick = {(e)=>this.initSim()}>restart</div>\r\n                     \r\n                    {/** this is where you place any misc inputs to your sim and bind them to state*/}\r\n                    \r\n                    <div className = \"num-input\">\r\n                        <em>Initial rightward velocity: (km/s)</em>\r\n                        {/**TODO: make custom input component */}\r\n                       1<input className = \"slider\" type=\"range\" min=\"1\" max=\"50\" value={String(Number(this.state.rVel)*10)} onChange={(v)=>this.setState({rVel: String(Number(v.target.value)/10)})}/>5\r\n                    </div>\r\n                    \r\n                </div>\r\n                <div className = \"sim-content\" ref={(thisDiv: HTMLDivElement) => { component.renderTarget = thisDiv }}\r\n                        onMouseMove={(e) => {  }}\r\n                    />\r\n                <div className = \"sim-footer\">Written by Theo Cooper</div>\r\n                \r\n            </div>\r\n\t\t);\r\n    }\r\n}\r\n","import * as PIXI from 'pixi.js';\r\nimport Vector2 from './utils/vect'\r\n\r\nexport const scalew = (width:number, sb:screenBounds): number => (sb.endX - sb.startX) / width;\r\nexport const scaleh = (height:number, sb:screenBounds): number => (sb.endY - sb.startY) / height;\r\n\r\nexport interface screenBounds{\r\n    screenWidth:number \r\n    screenHeight:number \r\n    startX:number \r\n    endX:number \r\n    startY:number \r\n    endY:number\r\n}\r\nexport default interface Drawable{\r\n    g:PIXI.Graphics\r\n\r\n    /**@param coordinates in real space, converted to pixel location based on internal scaling parameters \r\n     * @note all Drawables in a given application must be ensured to have the same space to pixel transforms\r\n    */\r\n    posToPx(sb:screenBounds):Vector2\r\n    \r\n    draw(sb:screenBounds):void\r\n}","import Vector2 from '../utils/vect'\r\nimport DynamicBody from '../IDynamicBody'\r\nimport CircleCollider from '../ICircleCollider'\r\nimport Drawable, { screenBounds, scaleh, scalew} from '../IDrawable'\r\nimport * as PIXI from 'pixi.js'\r\nconst COLOR = 0xFA0A0B\r\n\r\nexport default class BallColliderObject implements DynamicBody, CircleCollider, Drawable{\r\n    //NOTE: must add each g to app.stage\r\n    g: PIXI.Graphics\r\n\r\n    pos: Vector2\r\n    acc:Vector2\r\n    vel:Vector2\r\n    mass: number\r\n\r\n    radius: number\r\n\r\n    atRest:boolean\r\n\r\n    constructor(pos:Vector2, rad:number){\r\n        //somewhat hacked bc we know the system its used in\r\n        this.pos = pos;\r\n        this.vel = new Vector2(0,0);\r\n        this.acc = new Vector2(0, -9.8);\r\n        this.mass = 1;\r\n        this.radius = rad;\r\n        this.atRest = false;\r\n\r\n        this.g = new PIXI.Graphics();\r\n    }\r\n    \r\n    momentum = ():Vector2 => this.vel.multScalar(this.mass)\r\n\r\n    update(deltaT:number){\r\n        this.pos = this.pos.add(this.vel.multScalar(deltaT)); \r\n        this.vel = this.vel.add(this.acc.multScalar(deltaT));\r\n    }\r\n    setPos = (p:Vector2):void => {this.pos = p};\r\n    setVel = (v:Vector2):void => {this.vel = v}\r\n    setAcc = (a:Vector2):void => {this.acc = a}\r\n\r\n    isOverlapping(other:CircleCollider){\r\n        return this.pos.sub(other.pos).length() < this.radius + other.radius\r\n    }\r\n\r\n    posToPx(sb:screenBounds){\r\n        let px = ((this.pos.x - sb.startX) / scalew(sb.screenWidth, sb));\r\n        let py = ((-1 * (this.pos.y - sb.endY)) / scaleh(sb.screenHeight, sb));\r\n        return new Vector2(px,py);\r\n    }\r\n\r\n    draw(sb:screenBounds){\r\n        this.g.clear();\r\n        let pxPos:Vector2 = this.posToPx(sb);\r\n        // Circle\r\n        this.g.lineStyle(0); //lineStyle to zero so the circle doesn't have an outline\r\n        this.g.beginFill(COLOR, 1);\r\n        this.g.drawEllipse(pxPos.x, pxPos.y, this.radius / scalew(sb.screenWidth, sb), this.radius / scaleh(sb.screenHeight, sb)); //20px size is totally arbitrary but will be fine for now\r\n        this.g.endFill();\r\n    }\r\n}","import Vector2 from '../utils/vect'\r\nimport CircleCollider from '../ICircleCollider'\r\nimport Drawable,{screenBounds, scaleh, scalew} from '../IDrawable'\r\nimport * as PIXI from 'pixi.js'\r\nconst COLOR = 0xF8F8FF;\r\nexport default class PegColliderObject implements CircleCollider, Drawable{\r\n    pos: Vector2\r\n    vel: Vector2 = new Vector2(0,0)\r\n    acc: Vector2 = new Vector2(0,0)\r\n    mass: number\r\n    radius: number\r\n\r\n    atRest: boolean = true\r\n\r\n    g: PIXI.Graphics\r\n\r\n    constructor(p:Vector2, rad:number){\r\n        this.pos = p;\r\n        this.radius = rad;\r\n        this.mass = 1;\r\n\r\n        this.g = new PIXI.Graphics();\r\n    }\r\n\r\n\r\n    setPos = ():void => {};//cant alter pos\r\n    \r\n    momentum = ():Vector2 => new Vector2(0,0)\r\n\r\n    isOverlapping = (other:CircleCollider):boolean => this.pos.sub(other.pos).length() < this.radius + other.radius\r\n    \r\n    posToPx(sb:screenBounds){\r\n        let px = ((this.pos.x - sb.startX) / scalew(sb.screenWidth, sb));\r\n        let py = ((-1 * (this.pos.y - sb.endY)) / scaleh(sb.screenHeight, sb));\r\n        return new Vector2(px,py);\r\n    }\r\n\r\n    draw(sb:screenBounds){\r\n        this.g.clear();\r\n        let pxPos:Vector2 = this.posToPx(sb);\r\n        // Circle\r\n        this.g.lineStyle(0); //lineStyle to zero so the circle doesn't have an outline\r\n        this.g.beginFill(COLOR, 1);\r\n        this.g.drawEllipse(pxPos.x, pxPos.y, this.radius / scalew(sb.screenWidth, sb), this.radius / scaleh(sb.screenHeight, sb)); //20px size is totally arbitrary but will be fine for now\r\n        this.g.endFill();\r\n    }\r\n\r\n}","import BallColliderObject from \"./BallCollider\";\r\nimport PegColliderObject from \"./PegCollider\";\r\nimport Vector2 from \"../utils/vect\";\r\nimport { screenBounds } from \"../IDrawable\";\r\nimport * as PIXI from \"pixi.js\";\r\n\r\nconst MIN_VEL = 0.0001;\r\nconst VEL_NOISE_MAX = 0.01;\r\nconst PEG_RAD = 0.2;\r\nconst BALL_RAD = 0.2;\r\nconst BALL_START_POS = new Vector2(0, -BALL_RAD - 0.001);\r\nconst BB_RESTITUTION = 0.8; //what factor of kinetic energy is preserved in ball-ball collision, aka  how bouncy balls are with each other\r\nconst BP_RESTITUTION = 0.7; //what factor of kinetic energy is preserved in ball-peg collision, aka  how bouncy balls are with pegs\r\n\r\n//locations are percentages down the field in x and y\r\nconst PEG_LOCS: Vector2[] = [\r\n  new Vector2(-0.8, 0.2),\r\n  new Vector2(-0.6, 0.2),\r\n  new Vector2(-0.4, 0.2),\r\n  new Vector2(-0.2, 0.2),\r\n  new Vector2(0, 0.2),\r\n  new Vector2(0.8, 0.2),\r\n  new Vector2(0.6, 0.2),\r\n  new Vector2(0.4, 0.2),\r\n  new Vector2(0.2, 0.2),\r\n  new Vector2(-0.9, 0.3),\r\n  new Vector2(-0.7, 0.3),\r\n  new Vector2(-0.5, 0.3),\r\n  new Vector2(-0.3, 0.3),\r\n  new Vector2(-0.1, 0.3),\r\n  new Vector2(0.7, 0.3),\r\n  new Vector2(0.5, 0.3),\r\n  new Vector2(0.3, 0.3),\r\n  new Vector2(0.1, 0.3),\r\n  new Vector2(-0.8, 0.4),\r\n  new Vector2(-0.6, 0.4),\r\n  new Vector2(-0.4, 0.4),\r\n  new Vector2(-0.2, 0.4),\r\n  new Vector2(0, 0.4),\r\n  new Vector2(0.8, 0.4),\r\n  new Vector2(0.6, 0.4),\r\n  new Vector2(0.4, 0.4),\r\n  new Vector2(0.2, 0.4),\r\n  new Vector2(-0.9, 0.5),\r\n  new Vector2(-0.7, 0.5),\r\n  new Vector2(-0.5, 0.5),\r\n  new Vector2(-0.3, 0.5),\r\n  new Vector2(-0.1, 0.5),\r\n  new Vector2(0.7, 0.5),\r\n  new Vector2(0.5, 0.5),\r\n  new Vector2(0.3, 0.5),\r\n  new Vector2(0.1, 0.5),\r\n];\r\n\r\nexport default class Pegboard {\r\n  stage: PIXI.Container;\r\n\r\n  pegs: PegColliderObject[];\r\n  balls: BallColliderObject[];\r\n  allAtRest: boolean;\r\n\r\n  xrange: number[];\r\n  yrange: number[];\r\n\r\n  constructor(stage: PIXI.Container, xrange: number[], yrange: number[]) {\r\n    this.stage = stage;\r\n    this.pegs = [];\r\n    this.balls = [];\r\n\r\n    this.xrange = xrange;\r\n    this.yrange = yrange;\r\n    let xlen = Math.abs(xrange[0]) + Math.abs(xrange[1]);\r\n    let ylen = Math.abs(yrange[0]) + Math.abs(yrange[1]);\r\n\r\n    PEG_LOCS.forEach((loc) =>\r\n      this.pegs.push(\r\n        new PegColliderObject(\r\n          new Vector2((loc.x * xlen) / 2, -loc.y * ylen),\r\n          PEG_RAD\r\n        )\r\n      )\r\n    );\r\n\r\n    this.pegs.forEach((peg) => this.stage.addChild(peg.g));\r\n\r\n    this.allAtRest = false;\r\n  }\r\n\r\n  draw = (sb: screenBounds) => {\r\n    this.pegs.forEach((peg) => peg.draw(sb));\r\n    this.balls.forEach((ball) => ball.draw(sb));\r\n  };\r\n\r\n  step = (deltaT: number) => {\r\n    //console.log('deltat', deltaT);\r\n    if (this.balls.length === 0) {\r\n      return;\r\n    }\r\n    let ballsAtRest = 0;\r\n    let currBallLen = this.balls.length;\r\n    for (let i = 0; i < currBallLen; i++) {\r\n      let ball = this.balls[i];\r\n      if (!ball.atRest) {\r\n        ball.update(deltaT);\r\n\r\n        this.pegs.forEach((peg) => {\r\n          if (ball.isOverlapping(peg)) {\r\n            this.doBPCollision(ball, peg);\r\n          }\r\n        });\r\n\r\n        for (let j = i + 1; j < currBallLen; j++) {\r\n          let oball = this.balls[j];\r\n          if (ball.isOverlapping(oball)) this.doBBCollision(ball, oball);\r\n        }\r\n        this.checkEdge(ball);\r\n        // check to see if all balls are at rest\r\n        if (ball.atRest) ballsAtRest++;\r\n      }\r\n    }\r\n    if (ballsAtRest === this.balls.length) this.allAtRest = true;\r\n  };\r\n\r\n  spawnBall = () => {\r\n    this.balls.push(new BallColliderObject(BALL_START_POS, BALL_RAD));\r\n    this.stage.addChild(this.balls[this.balls.length - 1].g);\r\n  };\r\n\r\n  checkEdge(ball: BallColliderObject) {\r\n    // reverse ball x vel and push out of wall if bumps into side wall\r\n    if (ball.pos.x - ball.radius < this.xrange[0]) {\r\n      ball.setVel(new Vector2(-ball.vel.x, ball.vel.y));\r\n      ball.setPos(\r\n        new Vector2(this.xrange[0] + ball.radius + 0.001, ball.pos.y)\r\n      );\r\n    }\r\n    if (ball.pos.x + ball.radius > this.xrange[1]) {\r\n      ball.setVel(new Vector2(-ball.vel.x, ball.vel.y));\r\n      ball.setPos(\r\n        new Vector2(this.xrange[1] - ball.radius + 0.001, ball.pos.y)\r\n      );\r\n    }\r\n\r\n    //bounce off of ceiling\r\n    if (ball.pos.y + ball.radius > this.yrange[1]) {\r\n      ball.setVel(new Vector2(ball.vel.x, -ball.vel.y));\r\n      ball.setPos(\r\n        new Vector2(ball.pos.x, this.yrange[1] - ball.radius + 0.001)\r\n      );\r\n    }\r\n\r\n    //stop when hitting the floor\r\n    if (ball.pos.y < this.yrange[0]) {\r\n      ball.setVel(new Vector2(0, 0));\r\n      ball.atRest = true;\r\n    }\r\n  }\r\n\r\n  doBPCollision(ball: BallColliderObject, peg: PegColliderObject) {\r\n    // Get distances between the balls components\r\n    let distanceVect: Vector2 = ball.pos.sub(peg.pos);\r\n\r\n    // Calculate magnitude of the vector separating the balls\r\n    let distanceVectMag = distanceVect.length();\r\n\r\n    // Minimum distance before they are touching\r\n    let minDistance = ball.radius + peg.radius;\r\n\r\n    if (distanceVectMag < minDistance) {\r\n      //let distanceCorrection = (minDistance - distanceVectMag) / 2.0;\r\n      let d = distanceVect.copy();\r\n      let correctionVector = d.norm().multScalar(minDistance + 0.01);\r\n      ball.pos = ball.pos.add(correctionVector);\r\n\r\n      // get angle of distanceVect\r\n      let theta = distanceVect.radians();\r\n      // precalculate trig values\r\n      let sine = Math.sin(theta);\r\n      let cosine = Math.cos(theta);\r\n\r\n      /*\r\n       * bTemp will hold rotated ball poss. You just need to worry about bTemp[1]\r\n       * pos\r\n       */\r\n      let bTemp: Vector2[] = [new Vector2(0, 0), new Vector2(0, 0)];\r\n\r\n      /*\r\n       * this ball's pos is relative to the b2 so you can use the vector\r\n       * between them (bVect) as the reference point in the rotation expressions.\r\n       * bTemp[0].pos.x and bTemp[0].pos.y will initialize automatically to\r\n       * 0.0, which is what you want since b[1] will rotate around b[0]\r\n       */\r\n      bTemp[1] = new Vector2(\r\n        cosine * distanceVect.x + sine * distanceVect.y,\r\n        cosine * distanceVect.y - sine * distanceVect.x\r\n      );\r\n\r\n      // rotate Temporary velocities\r\n      let vTemp: Vector2[] = [\r\n        new Vector2(\r\n          cosine * ball.vel.x + sine * ball.vel.y,\r\n          cosine * ball.vel.y - sine * ball.vel.x\r\n        ),\r\n        new Vector2(\r\n          cosine * peg.vel.x + sine * peg.vel.y,\r\n          cosine * peg.vel.y - sine * peg.vel.x\r\n        ),\r\n      ];\r\n\r\n      /*\r\n       * Now that velocities are rotated, you can use 1D conservation of momentum\r\n       * equations to calculate the final vel along the x-axis.\r\n       */\r\n      let vFinal: Vector2[] = [\r\n        // final rotated vel for b[0]\r\n        new Vector2(\r\n          ((ball.mass - peg.mass) * vTemp[0].x + 2 * peg.mass * vTemp[1].x) /\r\n            (ball.mass + peg.mass),\r\n          vTemp[0].y\r\n        ),\r\n        // final rotated vel for b[0]\r\n        new Vector2(\r\n          ((peg.mass - ball.mass) * vTemp[1].x + 2 * ball.mass * vTemp[0].x) /\r\n            (ball.mass + peg.mass),\r\n          vTemp[1].y\r\n        ),\r\n      ];\r\n      // hack to avoid clumping\r\n      bTemp[0].add(new Vector2(vFinal[0].x, 0));\r\n      bTemp[1].add(new Vector2(vFinal[1].x, 0));\r\n\r\n      /*\r\n       * Rotate ball poss and velocities back Reverse signs in trig expressions\r\n       * to rotate in the opposite direction\r\n       */\r\n      // rotate balls\r\n      let bFinal: Vector2[] = [\r\n        new Vector2(\r\n          cosine * bTemp[0].x - sine * bTemp[0].y,\r\n          cosine * bTemp[0].y + sine * bTemp[0].x\r\n        ),\r\n        new Vector2(\r\n          cosine * bTemp[1].x - sine * bTemp[1].y,\r\n          cosine * bTemp[1].y + sine * bTemp[1].x\r\n        ),\r\n      ];\r\n\r\n      // update ball to screen pos\r\n      ball.setPos(ball.pos.add(bFinal[0]));\r\n\r\n      // update velocities\r\n      //ball.setVel(new Vector2(cosine * vFinal[0].x - sine * vFinal[0].y, cosine * vFinal[0].y + sine * vFinal[0].x));\r\n\r\n      // if peg doesn't move then for KE to be preserved output vel mag must be the same as input, just rotated\r\n      ball.setVel(Vector2.fromPolar(ball.vel.length(), theta));\r\n\r\n      // prevent head on collision from resulting in perfect up and down bouncing\r\n      let velNoiseVect: Vector2 = new Vector2(\r\n        (Math.random() - 0.5) * VEL_NOISE_MAX,\r\n        Math.abs(Math.random() * VEL_NOISE_MAX)\r\n      );\r\n      ball.setVel(ball.vel.add(velNoiseVect).multScalar(BP_RESTITUTION));\r\n\r\n      //check if velocities are low enough to set the ball to rest\r\n      if (ball.vel.length() < MIN_VEL) {\r\n        ball.setVel(new Vector2(0, 0));\r\n        ball.atRest = true;\r\n      }\r\n    }\r\n  }\r\n\r\n  doBBCollision(b1: BallColliderObject, b2: BallColliderObject) {\r\n    // Get distances between the balls components\r\n    let distanceVect: Vector2 = b1.pos.sub(b2.pos);\r\n\r\n    // Calculate magnitude of the vector separating the balls\r\n    let distanceVectMag = distanceVect.length();\r\n\r\n    // Minimum distance before they are touching\r\n    let minDistance = b1.radius + b2.radius;\r\n\r\n    if (distanceVectMag > minDistance) return;\r\n\r\n    //let distanceCorrection = (minDistance - distanceVectMag) / 2.0;\r\n    let d = distanceVect.copy();\r\n    let correctionVector = d.norm().multScalar(minDistance + 0.01);\r\n    b1.setPos(b1.pos.add(correctionVector));\r\n\r\n    // get angle of distanceVect\r\n    let theta = distanceVect.radians();\r\n    // precalculate trig values\r\n    let sine = Math.sin(theta);\r\n    let cosine = Math.cos(theta);\r\n\r\n    /*\r\n     * bTemp will hold rotated ball poss. You just need to worry about bTemp[1]\r\n     * pos\r\n     */\r\n    let bTemp: Vector2[] = [new Vector2(0, 0), new Vector2(0, 0)];\r\n\r\n    /*\r\n     * this ball's pos is relative to the b2 so you can use the vector\r\n     * between them (bVect) as the reference point in the rotation expressions.\r\n     * bTemp[0].pos.x and bTemp[0].pos.y will initialize automatically to\r\n     * 0.0, which is what you want since b[1] will rotate around b[0]\r\n     */\r\n    bTemp[1] = new Vector2(\r\n      cosine * distanceVect.x + sine * distanceVect.y,\r\n      cosine * distanceVect.y - sine * distanceVect.x\r\n    );\r\n\r\n    // rotate Temporary velocities\r\n    let vTemp: Vector2[] = [\r\n      new Vector2(\r\n        cosine * b1.vel.x + sine * b1.vel.y,\r\n        cosine * b1.vel.y - sine * b1.vel.x\r\n      ),\r\n      new Vector2(\r\n        cosine * b2.vel.x + sine * b2.vel.y,\r\n        cosine * b2.vel.y - sine * b2.vel.x\r\n      ),\r\n    ];\r\n\r\n    /*\r\n     * Now that velocities are rotated, you can use 1D conservation of momentum\r\n     * equations to calculate the final vel along the x-axis.\r\n     */\r\n    let vFinal: Vector2[] = [\r\n      // final rotated vel for b[0]\r\n      new Vector2(\r\n        ((b1.mass - b2.mass) * vTemp[0].x + 2 * b2.mass * vTemp[1].x) /\r\n          (b1.mass + b2.mass),\r\n        vTemp[0].y\r\n      ),\r\n      // final rotated vel for b[0]\r\n      new Vector2(\r\n        ((b2.mass - b1.mass) * vTemp[1].x + 2 * b1.mass * vTemp[0].x) /\r\n          (b1.mass + b2.mass),\r\n        vTemp[1].y\r\n      ),\r\n    ];\r\n    // hack to avoid clumping\r\n    bTemp[0].add(new Vector2(vFinal[0].x, 0));\r\n    bTemp[1].add(new Vector2(vFinal[1].x, 0));\r\n\r\n    /*\r\n     * Rotate ball poss and velocities back Reverse signs in trig expressions\r\n     * to rotate in the opposite direction\r\n     */\r\n    // rotate balls\r\n    let bFinal: Vector2[] = [\r\n      new Vector2(\r\n        cosine * bTemp[0].x - sine * bTemp[0].y,\r\n        cosine * bTemp[0].y + sine * bTemp[0].x\r\n      ),\r\n      new Vector2(\r\n        cosine * bTemp[1].x - sine * bTemp[1].y,\r\n        cosine * bTemp[1].y + sine * bTemp[1].x\r\n      ),\r\n    ];\r\n\r\n    // update ball to screen pos\r\n    b1.setPos(b1.pos.add(bFinal[0]));\r\n    b2.setPos(b2.pos.add(bFinal[1]));\r\n\r\n    if (b1.atRest || b2.atRest) {\r\n      b1.atRest = true;\r\n      b2.atRest = true;\r\n      return;\r\n    }\r\n\r\n    // update velocities\r\n    b1.setVel(\r\n      new Vector2(\r\n        cosine * vFinal[0].x - sine * vFinal[0].y,\r\n        cosine * vFinal[0].y + sine * vFinal[0].x\r\n      )\r\n    );\r\n    b2.setVel(\r\n      new Vector2(\r\n        cosine * vFinal[1].x - sine * vFinal[1].y,\r\n        cosine * vFinal[1].y + sine * vFinal[1].x\r\n      )\r\n    );\r\n\r\n    //\r\n    b1.setVel(b1.vel.multScalar(BB_RESTITUTION));\r\n    b2.setVel(b2.vel.multScalar(BB_RESTITUTION));\r\n\r\n    //check if velocities are low enough to set the balls to rest\r\n    if (b1.vel.length() < MIN_VEL) {\r\n      b1.setVel(new Vector2(0, 0));\r\n      b1.atRest = true;\r\n    }\r\n    if (b2.vel.length() < MIN_VEL) {\r\n      b2.setVel(new Vector2(0, 0));\r\n      b2.atRest = true;\r\n    }\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Redirect } from 'react-router-dom'\r\nimport Pegboard from './Pegboard'\r\nimport * as PIXI from 'pixi.js'\r\nimport { screenBounds } from '../IDrawable'\r\n\r\n/**\r\n * CONSTANTS\r\n */\r\nconst BOARDLEN = 20;\r\nconst updateTicker = new PIXI.Ticker();\r\ninterface iState {\r\n    paused: boolean,\r\n    goBack: boolean\r\n}\r\nexport default class pegboardSim extends Component<{}, iState>{\r\n    protected renderTarget: HTMLDivElement\r\n    protected G: PIXI.Graphics\r\n    protected app: PIXI.Application\r\n    protected prevUpdateTime: number\r\n    protected screen: screenBounds\r\n    protected timeoutPtr: any //weird js pointer type\r\n    readonly fps: number = 244;\r\n    protected title: string\r\n\r\n    board: Pegboard;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            paused: false,\r\n            goBack: false\r\n        }\r\n        //this.title = props.title\r\n        this.G = new PIXI.Graphics();\r\n        updateTicker.autoStart = true;\r\n    }\r\n\r\n    initPIXI = (backgroundColor: number) => {\r\n        //TODO: on resize reinit application and reassign this.G\r\n        //FIXME: get accurate canvas size from dom\r\n        this.app = new PIXI.Application({\r\n            width: this.screen.screenWidth,\r\n            height: this.screen.screenHeight,\r\n            backgroundColor: backgroundColor,\r\n            antialias: true\r\n        });\r\n        this.renderTarget.appendChild(this.app.view);\r\n        this.app.start(); //start renderer internal update ticker;\r\n        this.app.stage.addChild(this.G);\r\n        this.board = new Pegboard(this.app.stage, [this.screen.startX, this.screen.endX], [this.screen.startY, this.screen.endY]);\r\n    }\r\n\r\n    initSim = () => {\r\n        console.log('initsim called')\r\n        if (this.timeoutPtr) clearTimeout(this.timeoutPtr);\r\n        if (this.board) this.G.clear();\r\n\r\n        this.app.stage.addChild(this.G);\r\n        if(!updateTicker.started) updateTicker.add(deltaT => this.update(deltaT / 35));\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log(this.renderTarget.getBoundingClientRect())\r\n        let sw = document.getElementById('sim')?.clientWidth;\r\n        let sh = document.getElementById('sim')?.clientHeight;\r\n        sw = sw ? sw : window.innerWidth;\r\n        sh = sh ? sh : window.innerHeight\r\n\r\n        let ratio = sw / sh;\r\n\r\n        this.screen = {\r\n            screenWidth: sw,\r\n            screenHeight: sh,\r\n            startX: -ratio * BOARDLEN / 2, endX: ratio * BOARDLEN / 2,\r\n            startY: -BOARDLEN, endY: 0\r\n        }\r\n\r\n        console.log(this.screen.screenWidth, this.screen.screenHeight)\r\n        this.initPIXI(0x997950); //wood background\r\n        this.initSim();\r\n    }\r\n\r\n\r\n\r\n    draw = () => {\r\n        this.G.clear();\r\n        this.G.beginFill(0);\r\n        this.board.draw(this.screen);\r\n        this.G.endFill();\r\n    }\r\n\r\n    update = (deltaT: number) => {\r\n        if (this.state.paused) return;\r\n\r\n        /**UPDATE LOGIC */\r\n\r\n        //update vel, pos\r\n        this.board.step(deltaT);\r\n        this.draw();\r\n    }\r\n\r\n    handleKeyDown = (e: KeyboardEvent) => {\r\n        if (e.code === 'Space') {\r\n            e.preventDefault(); // stop space from scrolling\r\n        }\r\n    }\r\n\r\n    debounced = true;\r\n    handleKeyUp = (e: KeyboardEvent) => {\r\n        if (e.code === 'Space') {\r\n            e.preventDefault();\r\n            if (this.debounced) {\r\n                this.board.spawnBall();\r\n                this.debounced = false;\r\n                setTimeout(() => { this.debounced = true }, 250); //prevent spamming\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if (this.state.goBack) return <Redirect to={{ pathname: '/' }} />\r\n        let component = this;\r\n        window.addEventListener('keydown', (e) => this.handleKeyDown(e));\r\n        window.addEventListener('keyup', (e) => this.handleKeyUp(e))\r\n        return (\r\n            <div className=\"sim-wrapper\">\r\n                <div className=\"sim-header\">Pegboard Simulation</div>\r\n\r\n                <div className=\"sim-sidebar\">\r\n                    <div className=\"back-butt\" onClick={(e) => this.setState({ goBack: true })}>back</div>\r\n                    <div className=\"pause-butt\" onClick={(e) => this.setState({ paused: !this.state.paused })}>{!this.state.paused ? 'pause' : 'unpause'}</div>\r\n                    <div className=\"restart-butt\" onClick={(e) => this.initSim()}>restart</div>\r\n\r\n                    {/** this is where you place any misc inputs to your sim and bind them to state*/}\r\n\r\n                </div>\r\n\r\n                <div className=\"sim-content\" id='sim' ref={(thisDiv: HTMLDivElement) => { component.renderTarget = thisDiv }}\r\n                    onMouseMove={(e) => { }}\r\n                />\r\n                <div className=\"sim-footer\">Written by Theo Cooper</div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n}\r\n\r\n","import * as PIXI from \"pixi.js\";\r\nimport Drawable, { screenBounds, scaleh, scalew } from \"../IDrawable\";\r\nimport DynamicBody from \"../IDynamicBody\";\r\nimport Vector2 from \"../utils/vect\";\r\ninterface igrav extends DynamicBody, Drawable {}\r\n\r\nconst GRAV_CONST = 0.0000000000067\r\n\r\nconst COLOR = 0x00fa0f;\r\nexport default class GravBody implements igrav {\r\n  pos: Vector2;\r\n  vel: Vector2;\r\n  acc: Vector2;\r\n\r\n  mass: number;\r\n  radius: number;\r\n\r\n  g: PIXI.Graphics;\r\n  constructor(p: Vector2, v: Vector2, a: Vector2, mass: number, rad: number) {\r\n    this.pos = p;\r\n    this.vel = v;\r\n    this.acc = a;\r\n\r\n    this.radius = rad;\r\n    this.mass = mass;\r\n\r\n    this.g = new PIXI.Graphics();\r\n  }\r\n  setPos = (p: Vector2) => (this.pos = p);\r\n  setVel = (v: Vector2) => (this.vel = v);\r\n  setAcc = (a: Vector2) => (this.acc = a);\r\n\r\n  /**@param t - time difference between update calls ; must be in seconds _not ms_ */\r\n  update(t: number) {\r\n    this.pos = this.pos.add(this.vel.multScalar(t));\r\n    this.vel = this.vel.add(this.acc.multScalar(t));\r\n  }\r\n\r\n  gravInteract(other:GravBody){\r\n    let r:Vector2 = this.pos.sub(other.pos); //displacement vector\r\n    \r\n    // resultent force vector\r\n    let F:Vector2 = r.norm().multScalar( -GRAV_CONST * this.mass * other.mass / (r.length() ** 2) ); \r\n        \r\n    //ACC from force vector\r\n    this.setAcc(F.multScalar(1/this.mass));\r\n    other.setAcc(F.multScalar(1/other.mass));\r\n  }\r\n  \r\n  posToPx(sb: screenBounds) {\r\n    let px = (this.pos.x - sb.startX) / scalew(sb.screenWidth, sb);\r\n    let py = (-1 * (this.pos.y - sb.endY)) / scaleh(sb.screenHeight, sb);\r\n    return new Vector2(px, py);\r\n  }\r\n\r\n  draw(sb: screenBounds) {\r\n    this.g.clear();\r\n    let pxPos: Vector2 = this.posToPx(sb);\r\n    // Circle\r\n    this.g.lineStyle(0); //lineStyle to zero so the circle doesn't have an outline\r\n    this.g.beginFill(COLOR, 1);\r\n    this.g.drawEllipse(\r\n      pxPos.x,\r\n      pxPos.y,\r\n      this.radius / scalew(sb.screenWidth, sb),\r\n      this.radius / scaleh(sb.screenHeight, sb)\r\n    ); //20px size is totally arbitrary but will be fine for now\r\n    this.g.endFill();\r\n  }\r\n}\r\n","import GravBody from './GravBody';\r\nimport * as PIXI from 'pixi.js'\r\nimport { screenBounds } from '../IDrawable';\r\nimport Vector2 from '../utils/vect';\r\n\r\nexport default class GravSystem{\r\n    stage: PIXI.Container;\r\n\r\n    xrange: number[]\r\n    yrange: number[]\r\n\r\n    bodies:GravBody[]\r\n    constructor(stage:PIXI.Container, xrange:number[], yrange:number[]){\r\n        this.stage = stage;\r\n        this.xrange = xrange;\r\n        this.yrange = yrange;\r\n        this.bodies = [];\r\n    }\r\n\r\n    step = (deltaT: number) => {\r\n        for(let i = 0; i < this.bodies.length; i++){\r\n            this.bodies[i].update(deltaT);\r\n            for(let j = i + 1; j< this.bodies.length; j++){\r\n                this.bodies[i].gravInteract(this.bodies[j]);\r\n            }\r\n        }\r\n    }\r\n\r\n    spawnBody = (initPos:Vector2, initVel:Vector2 = new Vector2(0,0), mass:number = 1, rad:number = 1) =>{\r\n        this.bodies.push(new GravBody(initPos, initVel, new Vector2(0,0), mass, rad))\r\n        this.stage.addChild(this.bodies[this.bodies.length-1].g)\r\n    }\r\n\r\n    draw = (sb: screenBounds) => {\r\n        this.bodies.forEach((body) => body.draw(sb));\r\n    }\r\n\r\n}","import React, { Component } from 'react'\r\nimport { Redirect } from 'react-router-dom'\r\nimport * as PIXI from 'pixi.js'\r\nimport { screenBounds } from '../IDrawable'\r\nimport GravSystem from './GravSystem'\r\nimport Vector2 from '../utils/vect'\r\n\r\n/**\r\n * CONSTANTS\r\n */\r\nconst SPACE_HEIGHT = 20;\r\nconst updateTicker = new PIXI.Ticker();\r\ninterface iState {\r\n    paused: boolean,\r\n    goBack: boolean\r\n}\r\nexport default class threeBodySim extends Component<{}, iState>{\r\n    protected renderTarget: HTMLDivElement\r\n    protected G: PIXI.Graphics\r\n    protected app: PIXI.Application\r\n    protected prevUpdateTime: number\r\n    protected screen: screenBounds\r\n    protected title: string\r\n\r\n    gravSys: GravSystem\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            paused: false,\r\n            goBack: false\r\n        }\r\n        //this.title = props.title\r\n        this.G = new PIXI.Graphics();\r\n        updateTicker.autoStart = true;\r\n    }\r\n\r\n    initPIXI = (backgroundColor: number) => {\r\n        //TODO: on resize reinit application and reassign this.G\r\n        //FIXME: get accurate canvas size from dom\r\n        this.app = new PIXI.Application({\r\n            width: this.screen.screenWidth,\r\n            height: this.screen.screenHeight,\r\n            backgroundColor: backgroundColor,\r\n            antialias: true\r\n        });\r\n        this.renderTarget.appendChild(this.app.view);\r\n        this.app.start(); //start renderer internal update ticker;\r\n        this.app.stage.addChild(this.G);\r\n        this.gravSys = new GravSystem(this.app.stage, [this.screen.startX, this.screen.endX], [this.screen.startY, this.screen.endY]);\r\n        \r\n    }\r\n\r\n    initSim = () => {\r\n        console.log('initsim called');\r\n        if (this.gravSys) this.G.clear();\r\n        this.gravSys.spawnBody(new Vector2(0,-1));\r\n        this.gravSys.spawnBody(new Vector2(0, -5))\r\n        this.app.stage.addChild(this.G);\r\n        if(!updateTicker.started) updateTicker.add((deltaT:number) => this.update(deltaT / 35));\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log(this.renderTarget.getBoundingClientRect())\r\n        let sw = document.getElementById('sim')?.clientWidth;\r\n        let sh = document.getElementById('sim')?.clientHeight;\r\n        sw = sw ? sw : window.innerWidth;\r\n        sh = sh ? sh : window.innerHeight;\r\n\r\n        let ratio = sw / sh;\r\n\r\n        this.screen = {\r\n            screenWidth: sw,\r\n            screenHeight: sh,\r\n            startX: -ratio * SPACE_HEIGHT / 2, endX: ratio * SPACE_HEIGHT / 2,\r\n            startY: -SPACE_HEIGHT, endY: 0\r\n        }\r\n\r\n        console.log(this.screen.screenWidth, this.screen.screenHeight)\r\n        this.initPIXI(0x997950); //wood background\r\n        this.initSim();\r\n    }\r\n\r\n\r\n    draw = () => {\r\n        this.G.clear();\r\n        this.G.beginFill(0);\r\n        this.gravSys.draw(this.screen);\r\n        this.G.endFill();\r\n    }\r\n\r\n    update = (deltaT: number) => {\r\n        if (this.state.paused) return;\r\n\r\n        /**UPDATE LOGIC */\r\n\r\n        //update vel, pos\r\n        this.gravSys.step(deltaT);\r\n        this.draw();\r\n    }\r\n\r\n    handleClick = (e:any) =>{ //FIXME\r\n        console.log(e);\r\n    }\r\n\r\n    handleKeyDown = (e: KeyboardEvent) => {\r\n        if (e.code === 'Space') {\r\n            e.preventDefault(); // stop space from scrolling\r\n        }\r\n    }\r\n\r\n    debounced = true;\r\n    handleKeyUp = (e: KeyboardEvent) => {\r\n        if (e.code === 'Space') {\r\n            e.preventDefault();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if (this.state.goBack) return <Redirect to={{ pathname: '/' }} />\r\n        let component = this;\r\n        window.addEventListener('keydown', (e) => this.handleKeyDown(e));\r\n        window.addEventListener('keyup', (e) => this.handleKeyUp(e))\r\n        return (\r\n            <div className=\"sim-wrapper\">\r\n                <div className=\"sim-header\">Pegboard Simulation</div>\r\n\r\n                <div className=\"sim-sidebar\">\r\n                    <div className=\"back-butt\" onClick={(e) => this.setState({ goBack: true })}>back</div>\r\n                    <div className=\"pause-butt\" onClick={(e) => this.setState({ paused: !this.state.paused })}>{!this.state.paused ? 'pause' : 'unpause'}</div>\r\n                    <div className=\"restart-butt\" onClick={(e) => this.initSim()}>restart</div>\r\n\r\n                    {/** this is where you place any misc inputs to your sim and bind them to state*/}\r\n\r\n                </div>\r\n\r\n                <div className=\"sim-content\" id='sim' ref={(thisDiv: HTMLDivElement) => { component.renderTarget = thisDiv }}\r\n                    onMouseDown={(e)=>this.handleClick(e)}\r\n                />\r\n                <div className=\"sim-footer\">Written by Theo Cooper</div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n}\r\n\r\n","import React, { Component } from 'react'\r\nimport { Route, Redirect } from \"react-router-dom\";\r\n\r\n\r\ninterface iprops{\r\n    link: string,\r\n    title: string,\r\n    description: string\r\n}\r\ninterface istate{\r\n    isClicked:boolean\r\n}\r\n\r\nexport default class PreviewCard extends Component<iprops,istate> {\r\n    constructor(props:iprops){\r\n        super(props);\r\n        this.state = {isClicked:false};\r\n    }\r\n    render() {\r\n        //fuxk it write the hover css later stop being a dumbass\r\n        if(this.state.isClicked) return <Redirect to = {{pathname: this.props.link}} />\r\n        //TODO: add preview\r\n        return (\r\n            <div className='rounded-lg bg-purple-800 p-4 text-white m-3' style={{width:'80%'}} onClick={(e) => this.setState({isClicked:true})}>\r\n                <div className = 'hover:underline'>{this.props.title}</div>\r\n                <div className= ' text-blue-400'>{this.props.description}</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react'\r\nimport PreviewCard from './PreviewCard' \r\nimport {Grid} from '@primer/components'\r\n\r\n//WRITEME Tailwindcss\r\nexport const Home = () => {\r\n    return (\r\n        <div className = \" bg-gray-400 h-full\">\r\n            <div className = 'font-sans text-6xl text-white p-10'>Welcome to the home of Theo's physics sims</div>\r\n            \r\n            <Grid  gridTemplateColumns=\"repeat(3, auto)\" gridGap={3} className=' bg-gray-600 ' height='80%'> \r\n                <PreviewCard link = '/testsim'  title = 'Basic blank render with a circle' description = 'Purely for testing purposes.'/>\r\n                <PreviewCard link = '/particlesim'  title = '2d particle motion' description = 'demonstrates kinematic equations'/>\r\n                <PreviewCard link = '/orbitsim'  title = '2d orbit' description = 'demonstrates universal gravitation'/>\r\n                <PreviewCard link = '/pegboard'  title = 'Pegboard Simulation' description = 'demonstrates normal distrobution'/>\r\n                <PreviewCard link = '/universal-gravitation'  title = '3-Body Problem' description = 'demonstrates universal gravitation between dynamic bodies'/>\r\n            </Grid>\r\n        </div>\r\n    );\r\n}\r\n","import React,{useEffect} from 'react';\r\nimport {Switch, Route} from 'react-router-dom';\r\nimport * as SIMS from './simulation'\r\n\r\nimport {Home} from './Home';\r\n\r\nexport const App = () => { //Functional Component\r\n\r\n  useEffect(()=>{ // onmount\r\n  },[])\r\n\r\n  return (\r\n        <Switch>\r\n          <Route exact path = '/' component = {Home}/>\r\n          <Route exact path = '/testsim' component = {SIMS.BlankTestSim} />\r\n          <Route exact path = '/particlesim' component = {SIMS.BasicParticleSim} />\r\n          <Route exact path = '/orbitsim' component = {SIMS.OrbitSim} />\r\n          <Route exact path = '/pegboard' component = {SIMS.pegboardSim} />\r\n          <Route exact path = '/universal-gravitation' component = {SIMS.threeBodySim} />\r\n        </Switch>\r\n  );\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {App} from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport {HashRouter} from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <HashRouter>\r\n      <App />\r\n    </HashRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}